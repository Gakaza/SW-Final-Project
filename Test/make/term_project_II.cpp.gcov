        -:    0:Source:../samples/term_project_II.cpp
        -:    0:Graph:term_project_II.gcno
        -:    0:Data:term_project_II.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:Project Name: A.I. Term Porject II. NAÏVE BAYES
        -:    3:Name: 張書晧 Shu-Hao Chang
        -:    4:Student ID: 9917276
        -:    5:Goal: 
        -:    6:	To predict the output by the given input using Naïve Bayes Algorithm.
        -:    7:Requirement:
        -:    8:	1.	You are required to implement Naïve Bayes to handle the given data sets, where the bank folder and adult folder are the two given data sets.
        -:    9:	2.	The program MUST be written in C or C++ Language and can be compiled with Dev C++, Visual Studio  or Code Block.
        -:   10:	3.	The program is required to handle missing values and continuous attributes.
        -:   11:	4.	The output result MUST contain your prediction of each instance.
        -:   12:	5.	You MUST output five results with each data set (i.e. totally 10 results)
        -:   13:*/
        -:   14:
        -:   15:#include "term_project_II.h"
        -:   16:#include <iostream>
        -:   17:#include <fstream>
        -:   18:#include <stdio.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <string>
        -:   21:#include <string.h>
        -:   22:#include <math.h> 
        -:   23:using namespace std;
        -:   24:
        -:   25:
        -:   26:
        -:   27:			
        1:   28:int main1(){
        1:   29:	int chooseData = 0;
        -:   30:	FILE *pFile, *pTs, *pOutputFile;	//Tr, Ts, and Output text ptr. for bank
        1:   31:	int numData = 0, col, row;
        1:   32:	int CorrRate = 0;	//to test how many I predict correct.
        -:   33:	char tempAttribute[20][30];	//tempAttribute stores the attribute value for the current line.
        1:   34:	int numLine = 0; //for testing data.
        1:   35:	int numDataSet = 0;
        -:   36:	
        -:   37:	//-------------------Start of "BANK" Attribute related variables-----------------------
        1:   38:	float AgePercentage[2][5] = {0};	//the row is 0 = percentage base on output being 'no', 1 = output being 'yes'; 
        -:   39:										//the col is 5 different age intervals.
        1:   40:	int tempAge, numPerAge[2][5] = {0}, num_Age0=0, num_Age1=0; //five intervals: <30, >=30 && <40, >=40 && <50, >50 && <65, and >=65.
        -:   41:									//num_Age0 = 0 means te number of output being zero, where as the opposite (num_Age1) will be output being 1.
        1:   42:	float JobPercentage[2][11] = {0};
        1:   43:	int numPerJob[2][11] = {0}, num_job0 = 0, num_job1 = 0;
        1:   44:	float MaterialPercentage[2][3] = {0};
        1:   45:	int numPerMat[2][3] = {0}, num_Mat0 = 0, num_Mat1 = 0;
        1:   46:	float EducationPercentage[2][7] = {0};
        1:   47:	int numPerEdu[2][7] = {0}, num_Edu0 = 0, num_Edu1 = 0;
        1:   48:	float DefaultPercentage[2][2] = {0};
        1:   49:	int numPerDefault[2][2] = {0}, num_Def0 = 0, num_Def1 = 0;
        1:   50:	float HousePercentage[2][2] = {0};
        1:   51:	int numPerHouse[2][2] = {0}, num_House0 = 0, num_House1 = 0;
        1:   52:	float LoanPercentage[2][2] = {0};
        1:   53:	int numPerLoan[2][2] = {0}, num_Loan0 = 0, num_Loan1 = 0;
        1:   54:	float ContactPercentage[2][2] = {0};
        1:   55:	int numPerCon[2][2] = {0}, num_Con0 = 0, num_Con1 = 0;
        1:   56:	float MonthPercentage[2][12] = {0};
        1:   57:	int numPerMonth[2][12] = {0}, num_Month0 = 0, num_Month1 = 0;
        1:   58:	float DayPercentage[2][5] = {0};
        1:   59:	int numPerDay[2][5] = {0}, num_Day0 = 0, num_Day1 = 0;
        1:   60:	float CampaignPercentage[2][3] = {0};		//Numeric, need to decide what the intervals are...
        1:   61:	int tempCampaign, numPerCampaign[2][3] = {0}, num_Campaign0 = 0, num_Campaign1 = 0;
        1:   62:	float PDaysPercentage[2][4] = {0};			//Numeric, need to decide what the intervals are...
        1:   63:	int tempPDays, numPerPDays[2][4] = {0}, num_PDays0 = 0, num_PDays1 = 0;
        1:   64:	float PreviousPercentage[2][2] = {0};		
        1:   65:	int tempPrevious, numPerPrevious[2][2] = {0}, num_Previous0 = 0, num_Previous1 = 0;
        1:   66:	float PoutcomePercentage[2][3] = {0};
        1:   67:	int numPerPoutcome[2][3] = {0}, num_Poutcome0 = 0, num_Poutcome1 = 0;
        1:   68:	float EmpPercentage[2][4] = {0}, tempEmp;
        1:   69:	int num_Emp0 = 0, num_Emp1 = 0, numPerEmp[2][6] = {0};
        1:   70:	float PricePercentage[2][3] = {0}, tempPrice;
        1:   71:	int num_Price0 = 0, num_Price1 = 0, numPerPrice[2][3] = {0};
        1:   72:	float ConfPercentage[2][4] = {0}, tempConf;
        1:   73:	int num_Conf0 = 0, num_Conf1 = 0, numPerConf[2][4] = {0};
        1:   74:	float Euribor3mPercentage[2][4] = {0}, tempEuribor3m;
        1:   75:	int num_Euribor3m0 = 0, num_Euribor3m1 = 0, numPerEuribor3m[2][4] = {0};
        1:   76:	float NrPercentage[2][2] = {0}, tempNr;
        1:   77:	int num_Nr0 = 0, num_Nr1 = 0, numPerNr[2][2] = {0};
        -:   78:	
        -:   79:	
        1:   80:	float OutputPercentage[2] = {0};
        1:   81:	int numPerOutput[2] = {0};
        -:   82:	//-------------------End of BANK Attribute related variables-----------------------
        -:   83:	
        -:   84:	//The percentage of No output and the percentage of Yes output in the testing data.
        1:   85:	double NoOutput_Percentage = 0, YesOutput_Percentage = 0;
        1:   86:	float tempAttPercentage [2][20] = {0}; //row = 0 is percentage of output being zero
        -:   87:          //with respect to each inteveral (the columns); similarly row = 1 is percentage of output being one.
        1:   88:	float perdictedOutput = 0;
        7:   89:	while(numDataSet < 5){
        -:   90:		//----------------------------------------------------------
        -:   91:		//-------------------Start of Bank Data base------------------
        -:   92:		//----------------------------------------------------------
        5:   93:		switch(numDataSet){
        -:   94:			case 0:
        1:   95:					pFile = fopen ("./bank/testing-training 01/training01.txt", "r");
        1:   96:					pTs = fopen ("./bank/testing-training 01/testing01.txt", "r");
        1:   97:					pOutputFile = fopen ("./bank/testing-training 01/OutputFile_01.txt","w");
        1:   98:					break;
        -:   99:			case 1:
        1:  100:					pFile = fopen ("./bank/testing-training 02/training02.txt", "r");
        1:  101:					pTs = fopen ("./bank/testing-training 02/testing02.txt", "r");
        1:  102:					pOutputFile = fopen ("./bank/testing-training 02/OutputFile_02.txt","w");
        1:  103:					break;		
        -:  104:			case 2:
        1:  105:					pFile = fopen ("./bank/testing-training 03/training03.txt", "r");
        1:  106:					pTs = fopen ("./bank/testing-training 03/testing03.txt", "r");
        1:  107:					pOutputFile = fopen ("./bank/testing-training 03/OutputFile_03.txt","w");
        1:  108:					break;
        -:  109:			case 3:
        1:  110:					pFile = fopen ("./bank/testing-training 04/training04.txt", "r");
        1:  111:					pTs = fopen ("./bank/testing-training 04/testing04.txt", "r");
        1:  112:					pOutputFile = fopen ("./bank/testing-training 04/OutputFile_04.txt","w");
        1:  113:					break;
        -:  114:			case 4:
        1:  115:					pFile = fopen ("./bank/testing-training 05/training05.txt", "r");
        1:  116:					pTs = fopen ("./bank/testing-training 05/testing05.txt", "r");
        1:  117:					pOutputFile = fopen ("./bank/testing-training 05/OutputFile_05.txt","w");
        1:  118:					break;
        -:  119:		};
        -:  120:		
        5:  121:		if(pFile == NULL){ 
    #####:  122:		cout<<"Error opening the pFile txt file"<<endl;
        -:  123:		//system("PAUSE");
    #####:  124:		return 1;
        -:  125:		}
        5:  126:		if(pTs == NULL){ 
    #####:  127:			cout<<"Error opening the pTs txt file"<<endl;
        -:  128:			//system("PAUSE");
    #####:  129:			return 1;
        -:  130:		}
        -:  131:		//check for not equal to EOF, Reading from Trainning Data
        -:  132:		//a dumb way to read a line from files, total of 20 attributes to read per line.
   164767:  133:		while(fscanf(pFile, "%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,], %[^,],%[^,],%[^,],%[^,\n]",
        -:  134:							tempAttribute[0], tempAttribute[1], tempAttribute[2], tempAttribute[3], tempAttribute[4]
        -:  135:						, tempAttribute[5], tempAttribute[6], tempAttribute[7], tempAttribute[8], tempAttribute[9], tempAttribute[10]
        -:  136:						, tempAttribute[11], tempAttribute[12], tempAttribute[13], tempAttribute[14], tempAttribute[15], tempAttribute[16] 
   164762:  137:						, tempAttribute[17], tempAttribute[18], tempAttribute[19]) != EOF)				
        -:  138:		{
   164757:  139:			numData++; //numData = numPerOutput[0] + numPerOutput[1]; which is the total number of output for "yes" and "no" combined.
        -:  140:			/* With respect to the tempAttribute[i], row number.
        -:  141:			# bank client data: 
        -:  142:				0 - age (numeric) 
        -:  143:				1 - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','?') 
        -:  144:				2 - marital : marital status (categorical: 'divorced','married','single','?'; note: 'divorced' means divorced or widowed) 
        -:  145:				3 - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','?') 
        -:  146:				4 - default: has credit in default? (categorical: 'no','yes','?') 
        -:  147:				5 - housing: has housing loan? (categorical: 'no','yes','?') 
        -:  148:				6 - loan: has personal loan? (categorical: 'no','yes','?') 
        -:  149:			# related with the last contact of the current campaign: 
        -:  150:				7 - contact: contact communication type (categorical: 'cellular','telephone') 
        -:  151:				8 - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec') 
        -:  152:				9 - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri') 
        -:  153:			# other attributes: 
        -:  154:				10 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact) 
        -:  155:					- 3 intervals: (0 ~ 3), (4~6), (7+)
        -:  156:				11 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted) 
        -:  157:						- 4 intervals: (0~11), (12~20), (20 ~ 27), (999) 
        -:  158:				12 - previous: number of contacts performed before this campaign and for this client (numeric) 
        -:  159:						- intervals: 0, (not 0)
        -:  160:				13 - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success') 
        -:  161:						- intervals: shown as above.
        -:  162:			# social and economic context attributes 
        -:  163:				14 - emp.var.rate: employment variation rate - quarterly indicator (numeric) 
        -:  164:						- 4 intervals: (x>1.0), (-1.0<= x < 1.0) , (-2.0<= x <-1.0) , (x < -2.0)
        -:  165:				15 - cons.price.idx: consumer price index - monthly indicator (numeric)
        -:  166:						- 3 intervals: (x>94.45), (92.8 <= x < 94.45), (x < 92.8)
        -:  167:				16 - cons.conf.idx: consumer confidence index - monthly indicator (numeric) 
        -:  168:						- 4 intervals: (x>-30.0), (-35.0<= x < -30.0), (-45.0< = x < -35.0), ( x < -45.0)
        -:  169:				17 - euribor3m: euribor 3 month rate - daily indicator (numeric) 
        -:  170:						- 4 intervals: (x > 4.86), ( 4.0 <= x < 4.86), ( 1.0 <= x < 4.0), , ( x < 1.0)
        -:  171:				18 - nr.employed: number of employees - quarterly indicator (numeric) 
        -:  172:						- 2 intervals: (x > 5200.0), (x <= 5200.0)
        -:  173:				Output variable (desired target): 
        -:  174:				19 - y - has the client subscribed a term deposit? (binary: 'no','yes') 
        -:  175:						- 2 intervals: yes or no
        -:  176:			*/
        -:  177:			// 0 - age (numeric)
   164757:  178:			ageClass(tempAttribute, numPerAge, num_Age0, num_Age1);
        -:  179:			
        -:  180:			//1 - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','?') 
   164757:  181:			jobClass(tempAttribute, numPerJob, num_job0, num_job1);
        -:  182:			
        -:  183:			
        -:  184:			//2 - marital : marital status (categorical: 'divorced','married','single','?'; note: 'divorced' means divorced or widowed) 
        -:  185:			//int numPerMat[2][3] = {0}, num_Mat0 = 0, num_Mat1 = 0;
   164757:  186:			maritalClass(tempAttribute, numPerMat, num_Mat0, num_Mat1);
        -:  187:			
        -:  188:			//3 - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','?')
   164757:  189:			eduClass(tempAttribute, numPerEdu, num_Edu0, num_Edu1);
        -:  190:			
        -:  191:			//4 - default: has credit in default? (categorical: 'no','yes','?') 
        -:  192:			//int numPerDefault[2][2] = {0}, num_Def0 = 0, num_Def1 = 0;
   164757:  193:			defaultClass(tempAttribute, numPerDefault, num_Def0, num_Def1);
        -:  194:			
        -:  195:			//5 - housing: has housing loan? (categorical: 'no','yes','?') 
        -:  196:			//int numPerHouse[2][2] = {0}, num_House0 = 0, num_House1 = 0;
   164757:  197:			houseClass(tempAttribute, numPerHouse, num_House0, num_House1);
        -:  198:			
        -:  199:			
        -:  200:			//6 - loan: has personal loan? (categorical: 'no','yes','?') 
        -:  201:			//int numPerLoan[2][2] = {0}, num_Loan0 = 0, num_Loan1 = 0;
   164757:  202:			loanClass(tempAttribute, numPerLoan, num_Loan0, num_Loan1);
        -:  203:			
        -:  204:			//7 - contact: contact communication type (categorical: 'cellular','telephone') 
        -:  205:			//int numPerCon[2][2] = {0}, num_Con0 = 0, num_Con1 = 0;
   164757:  206:			contactClass(tempAttribute, numPerCon, num_Con0, num_Con1);
        -:  207:			
        -:  208:			//8 - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec') 
        -:  209:			//int numPerMonth[2][12] = {0}, num_Month0 = 0, num_Month1 = 0;
   164757:  210:			monthClass(tempAttribute, numPerMonth, num_Month0, num_Month1);
        -:  211:			
        -:  212:			
        -:  213:			//9 - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri') 
        -:  214:			//int numPerDay[2][5] = {0}, num_Day0 = 0, num_Day1 = 0;
   164757:  215:			dayClass(tempAttribute, numPerDay, num_Day0, num_Day1);
        -:  216:			
        -:  217:			/*10 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact) 
        -:  218:					- 3 intervals: (0 ~ 3), (4~6), (7+)	*/
        -:  219:			//int tempCampaign, numPerCampaign[2][3] = {0}, num_Campaign0 = 0, num_Campaign1 = 0;
   164757:  220:			tempCampaignClass(tempAttribute, numPerCampaign, num_Campaign0, num_Campaign1);
        -:  221:			
        -:  222:			
        -:  223:			//11 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted) 
        -:  224:			//			- 4 intervals: (0~11), (12~20), (21 ~ 27), (999) 
        -:  225:			//int tempPDays, numPerPDays[2][5] = {0}, num_PDays0 = 0, num_PDays1 = 0;
   164757:  226:			tempPDaysClass(tempAttribute, numPerPDays, num_PDays0, num_PDays1);
        -:  227:			
        -:  228:			
        -:  229:			//12 - previous: number of contacts performed before this campaign and for this client (numeric) 
        -:  230:			//			- intervals: 0, (not 0)
        -:  231:			//int tempPrevious, numPerPrevious[2][2] = {0}, num_Previous0 = 0, num_Previous1 = 0;
   164757:  232:			tempPreviousClass(tempAttribute, numPerPrevious, num_Previous0, num_Previous1);
        -:  233:						
        -:  234:			//13 - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success') 
        -:  235:			//			- intervals: shown as above.
        -:  236:			//int numPerPoutcome[2][3] = {0}, num_Poutcome0 = 0, num_Poutcome1 = 0;
   164757:  237:			numPerPoutcomeClass(tempAttribute, numPerPoutcome, num_Poutcome0, num_Poutcome1);
        -:  238:			
        -:  239:			
        -:  240:			//14 - emp.var.rate: employment variation rate - quarterly indicator (numeric) 
        -:  241:			//			- 4 intervals: (x>1.0), (-1.0<= x < 1.0) , (-2.0<= x <-1.0) , (x < -2.0)
        -:  242:			//float tempEmp; int numPerEmp[2][6] = {0}, num_Emp0 = 0, num_Emp1 = 0;
   164757:  243:			tempEmpClass(tempAttribute, numPerEmp, num_Emp0, num_Emp1);
        -:  244:			
        -:  245:			//15 - cons.price.idx: consumer price index - monthly indicator (numeric)
        -:  246:			//			- 3 intervals: (x>94.45), (92.8 <= x < 94.45), (x < 92.8)
        -:  247:			//float tempPrice; int numPerPrice[2][5] = {0}, num_Price0 = 0, num_Price1 = 0;
   164757:  248:			tempPriceClass(tempAttribute, numPerPrice, num_Price0, num_Price1);
        -:  249:			
        -:  250:			//16 - cons.conf.idx: consumer confidence index - monthly indicator (numeric) 
        -:  251:			//			- 4 intervals: (x>-30.0), (-35.0<= x < -30.0), (-45.0< = x < -35.0), ( x < -45.0)
        -:  252:			//float tempConf; int numPerConf[2][6] = {0}, num_Conf0 = 0, num_Conf1 = 0;
   164757:  253:			tempConfClass(tempAttribute, numPerConf, num_Conf0, num_Conf1);
        -:  254:			
        -:  255:			//May 30th.
        -:  256:			//17 - euribor3m: euribor 3 month rate - daily indicator (numeric) 
        -:  257:			//			- 4 intervals: (x > 4.86), ( 4.0 <= x < 4.86), ( 1.0 <= x < 4.0), , ( x < 1.0)
        -:  258:			//float tempEuribor3m; int numPerEuribor3m[2][5] = {0}, num_Euribor3m0 = 0, num_Euribor3m1 = 0;
   164757:  259:			tempEuribor3mClass(tempAttribute, numPerEuribor3m, num_Euribor3m0, num_Euribor3m1);
        -:  260:			
        -:  261:			//18 - nr.employed: number of employees - quarterly indicator (numeric) 
        -:  262:			//			- 2 intervals: (x > 5200.0), (x <= 5200.0)
        -:  263:			//int tempNr, numPerNr[2][2] = {0}, num_Nr0 = 0, num_Nr1 = 0;
   164757:  264:			tempNrClass(tempAttribute, numPerNr, num_Nr0, num_Nr1);
        -:  265:			
        -:  266:			//19 - y - has the client subscribed a term deposit? (binary: 'no','yes') 
        -:  267:			//			- 2 intervals: yes or no
        -:  268:			//int numPerOutput[2] = {0};
   164757:  269:			numPerOutputClass(tempAttribute, numPerOutput);
        -:  270:			
        -:  271:			//----------------------Debug part--------------------------------------
        -:  272:			//for(;;)
        -:  273:		}
        -:  274:		
        -:  275:		//----------------------------------------------------------------
        -:  276:		//----------------------Start of Calculation part-----------------
        -:  277:		//----------------------------------------------------------------
        -:  278:		//0- Calculating the Age percentage and store it in AgePercentag[row][col], with respect to numPerAge[row][col] and num_Age0 and num_Age1.
       15:  279:		for(row = 0;row<2;row++){
       60:  280:			for(col = 0;col<5;col++){
       50:  281:				if(row==0)
       25:  282:					AgePercentage[row][col] = (float) numPerAge[row][col] / num_job0;
        -:  283:				else
       25:  284:					AgePercentage[row][col] = (float) numPerAge[row][col] / num_job1;
        -:  285:			}
        -:  286:		}
        -:  287:		
        -:  288:		//1- Calculate the Job percentage
       15:  289:		for(row = 0;row<2;row++){
      120:  290:			for(col = 0;col<11;col++){
      110:  291:				if(row==0)
       55:  292:					JobPercentage[row][col] = (float) numPerJob[row][col] / num_Age0;
        -:  293:				else
       55:  294:					JobPercentage[row][col] = (float) numPerJob[row][col] / num_Age1;
        -:  295:			}
        -:  296:		}
        -:  297:		
        -:  298:		//2- Calculate the Material percentage
       15:  299:		for(row = 0;row<2;row++){
       40:  300:			for(col = 0;col<3;col++){
       30:  301:				if(row==0)
       15:  302:					MaterialPercentage[row][col] = (float) numPerMat[row][col] / num_Mat0;
        -:  303:				else
       15:  304:					MaterialPercentage[row][col] = (float) numPerMat[row][col] / num_Mat1;
        -:  305:			}
        -:  306:		}
        -:  307:		
        -:  308:		//3- Calculate the Education Percentage
       15:  309:		for(row = 0;row<2;row++){
       80:  310:			for(col = 0;col<7;col++){
       70:  311:				if(row==0)
       35:  312:					EducationPercentage[row][col] = (float) numPerEdu[row][col] / num_Edu0;
        -:  313:				else
       35:  314:					EducationPercentage[row][col] = (float) numPerEdu[row][col] / num_Edu1;
        -:  315:			}
        -:  316:		}
        -:  317:
        -:  318:		
        -:  319:		//4- Calculate the Default percentage
       15:  320:		for(row = 0;row<2;row++){
       30:  321:			for(col = 0;col<2;col++){
       20:  322:				if(row==0)
       10:  323:					DefaultPercentage[row][col] = (float) numPerDefault[row][col] / num_Def0;
        -:  324:				else
       10:  325:					DefaultPercentage[row][col] = (float) numPerDefault[row][col] / num_Def1;
        -:  326:			}
        -:  327:		}
        -:  328:		
        -:  329:		//5- Calculate the housing percentage
       15:  330:		for(row = 0;row<2;row++){
       30:  331:			for(col = 0;col<2;col++){
       20:  332:				if(row==0)
       10:  333:					HousePercentage[row][col] = (float) numPerHouse[row][col] / num_House0;
        -:  334:				else
       10:  335:					HousePercentage[row][col] = (float) numPerHouse[row][col] / num_House1;
        -:  336:			}
        -:  337:		}
        -:  338:		
        -:  339:		//6- Calculate the loan percentage
       15:  340:		for(row = 0;row<2;row++){
       30:  341:			for(col = 0;col<2;col++){
       20:  342:				if(row==0)
       10:  343:					LoanPercentage[row][col] = (float) numPerLoan[row][col] / num_Loan0;
        -:  344:				else
       10:  345:					LoanPercentage[row][col] = (float) numPerLoan[row][col] / num_Loan1;
        -:  346:			}
        -:  347:		}
        -:  348:		
        -:  349:		//7- Calculate the ContactPercentage
       15:  350:		for(row = 0;row<2;row++){
       30:  351:			for(col = 0;col<2;col++){
       20:  352:				if(row==0)
       10:  353:					ContactPercentage[row][col] = (float) numPerCon[row][col] / num_Con0;
        -:  354:				else
       10:  355:					ContactPercentage[row][col] = (float) numPerCon[row][col] / num_Con1;
        -:  356:			}
        -:  357:		}
        -:  358:		
        -:  359:		//8- Calculate the MonthPercentage
       15:  360:		for(row = 0;row<2;row++){
      130:  361:			for(col = 0;col<12;col++){
      120:  362:				if(row==0)
       60:  363:					MonthPercentage[row][col] = (float) numPerMonth[row][col] / num_Month0;
        -:  364:				else
       60:  365:					MonthPercentage[row][col] = (float) numPerMonth[row][col] / num_Month1;
        -:  366:			}
        -:  367:		}
        -:  368:		
        -:  369:		//9- Calculate the DayPercentage
       15:  370:		for(row = 0;row<2;row++){
       60:  371:			for(col = 0;col<5;col++){
       50:  372:				if(row==0)
       25:  373:					DayPercentage[row][col] = (float) numPerDay[row][col] / num_Day0;
        -:  374:				else
       25:  375:					DayPercentage[row][col] = (float) numPerDay[row][col] / num_Day1;
        -:  376:			}
        -:  377:		}
        -:  378:		
        -:  379:		//10- Calculate the CampaignPercentage
       15:  380:		for(row = 0;row<2;row++){
       40:  381:			for(col = 0;col<3;col++){
       30:  382:				if(row==0)
       15:  383:					CampaignPercentage[row][col] = (float) numPerCampaign[row][col] / num_Campaign0;
        -:  384:				else
       15:  385:					CampaignPercentage[row][col] = (float) numPerCampaign[row][col] / num_Campaign1;
        -:  386:			}
        -:  387:		}
        -:  388:		
        -:  389:		//11- Calculate the PDaysPercentage
       15:  390:		for(row = 0;row<2;row++){
       50:  391:			for(col = 0;col<4;col++){
       40:  392:				if(row==0)
       20:  393:					PDaysPercentage[row][col] = (float) numPerPDays[row][col] / num_PDays0;
        -:  394:				else
       20:  395:					PDaysPercentage[row][col] = (float) numPerPDays[row][col] / num_PDays1;
        -:  396:			}
        -:  397:		}
        -:  398:		
        -:  399:		//12- Calculate the PreviousPercentage
       15:  400:		for(row = 0;row<2;row++){
       30:  401:			for(col = 0;col<2;col++){
       20:  402:				if(row==0)
       10:  403:					PreviousPercentage[row][col] = (float) numPerPrevious[row][col] / num_Previous0;
        -:  404:				else
       10:  405:					PreviousPercentage[row][col] = (float) numPerPrevious[row][col] / num_Previous1;
        -:  406:			}
        -:  407:		}
        -:  408:		
        -:  409:		//13- Calculate the PoutcomePercentage
       15:  410:		for(row = 0;row<2;row++){
       40:  411:			for(col = 0;col<3;col++){
       30:  412:				if(row==0)
       15:  413:					PoutcomePercentage[row][col] = (float) numPerPoutcome[row][col] / num_Poutcome0;
        -:  414:				else
       15:  415:					PoutcomePercentage[row][col] = (float) numPerPoutcome[row][col] / num_Poutcome1;
        -:  416:			}
        -:  417:		}
        -:  418:
        -:  419:		//14- Calculate the EmpPercentage
       15:  420:		for(row = 0;row<2;row++){
       50:  421:			for(col = 0;col<4;col++){
       40:  422:				if(row==0)
       20:  423:					EmpPercentage[row][col] = (float) numPerEmp[row][col] / num_Emp0;
        -:  424:				else
       20:  425:					EmpPercentage[row][col] = (float) numPerEmp[row][col] / num_Emp1;
        -:  426:			}
        -:  427:		}
        -:  428:		
        -:  429:		//15- Calculate the PricePercentage
       15:  430:		for(row = 0;row<2;row++){
       40:  431:			for(col = 0;col<3;col++){
       30:  432:				if(row==0)
       15:  433:					PricePercentage[row][col] = (float) numPerPrice[row][col] / num_Price0;
        -:  434:				else
       15:  435:					PricePercentage[row][col] = (float) numPerPrice[row][col] / num_Price1;
        -:  436:			}
        -:  437:		}
        -:  438:		
        -:  439:		//16- Calculate the ConfPercentage
       15:  440:		for(row = 0;row<2;row++){
       50:  441:			for(col = 0;col<4;col++){
       40:  442:				if(row==0)
       20:  443:					ConfPercentage[row][col] = (float) numPerConf[row][col] / num_Conf0;
        -:  444:				else
       20:  445:					ConfPercentage[row][col] = (float) numPerConf[row][col] / num_Conf1;
        -:  446:			}
        -:  447:		}
        -:  448:		
        -:  449:		//17- Calculate the Euribor3mPercentage
       15:  450:		for(row = 0;row<2;row++){
       50:  451:			for(col = 0;col<4;col++){
       40:  452:				if(row==0)
       20:  453:					Euribor3mPercentage[row][col] = (float) numPerEuribor3m[row][col] / num_Euribor3m0;
        -:  454:				else
       20:  455:					Euribor3mPercentage[row][col] = (float) numPerEuribor3m[row][col] / num_Euribor3m1;
        -:  456:			}
        -:  457:		}
        -:  458:		
        -:  459:		//18- Calculate the NrPercentage
       15:  460:		for(row = 0;row<2;row++){
       30:  461:			for(col = 0;col<2;col++){
       20:  462:				if(row==0)
       10:  463:					NrPercentage[row][col] = (float) numPerNr[row][col] / num_Nr0;
        -:  464:				else
       10:  465:					NrPercentage[row][col] = (float) numPerNr[row][col] / num_Nr1;
        -:  466:			}
        -:  467:		}
        -:  468:		
        -:  469:		
        -:  470:		//19- Calculate the OutputPercentage
        -:  471:		//cout<<"\nnumber of data: "<<numData<<"; "<<numPerOutput[0]<<"; "<<numPerOutput[1]<<endl;
        5:  472:		OutputPercentage[0] =  (float) numPerOutput[0] / numData;
        5:  473:		OutputPercentage[1] =  (float) numPerOutput[1] / numData;
        -:  474:		
        -:  475:		//---------------------------------------------------------------
        -:  476:		//-----------------Start to read Testing data 01----------------------
        -:  477:		//---------------------------------------------------------------
        -:  478:		
    41203:  479:		while(fscanf(pTs, "%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,],%[^,], %[^,],%[^,],%[^,],%[^,\n]",
        -:  480:							tempAttribute[0], tempAttribute[1], tempAttribute[2], tempAttribute[3], tempAttribute[4]
        -:  481:						, tempAttribute[5], tempAttribute[6], tempAttribute[7], tempAttribute[8], tempAttribute[9], tempAttribute[10]
        -:  482:						, tempAttribute[11], tempAttribute[12], tempAttribute[13], tempAttribute[14], tempAttribute[15], tempAttribute[16] 
    41198:  483:						, tempAttribute[17], tempAttribute[18], tempAttribute[19]) != EOF /*&& numTest < 5 */)
        -:  484:		{
        -:  485:			//for testing a limited number of data set.
    41193:  486:			numLine++;
        -:  487:			
        -:  488:			//0- Calculating the Age percentage and store it in AgePercentage[row][col], with respect to numPerAge[row][col] along with num_Age0 and num_Age1.
    41193:  489:			ageReadClass(tempAttribute,tempAttPercentage,  AgePercentage);
        -:  490:			
        -:  491:			//1- Calculate the Job percentage
    41193:  492:			jobReadClass(tempAttribute, tempAttPercentage, JobPercentage);
        -:  493:			
        -:  494:			//2- Calculate the Material percentage
    41193:  495:			materialReadClass(tempAttribute, tempAttPercentage, MaterialPercentage);
        -:  496:			
        -:  497:			//3- Calculate the Education Percentage
    41193:  498:			EduReadClass(tempAttribute, tempAttPercentage, EducationPercentage);
        -:  499:	
        -:  500:			
        -:  501:			//4- Calculate the Default percentage
    41193:  502:			DefaultReadClass(tempAttribute, tempAttPercentage, DefaultPercentage);
        -:  503:			
        -:  504:			//5- Calculate the housing percentage
    41193:  505:			houseReadClass(tempAttribute, tempAttPercentage, HousePercentage);
        -:  506:			
        -:  507:			//6- Calculate the loan percentage
    41193:  508:			loanReadClass(tempAttribute, tempAttPercentage, LoanPercentage);
        -:  509:			
        -:  510:			//7- Calculate the ContactPercentage
    41193:  511:			contactReadClass(tempAttribute, tempAttPercentage, ContactPercentage);
        -:  512:			
        -:  513:			//8- Calculate the MonthPercentage
    41193:  514:			monthReadClass(tempAttribute, tempAttPercentage, MonthPercentage);
        -:  515:			
        -:  516:			//9- Calculate the DayPercentage
    41193:  517:			dayReadClass(tempAttribute, tempAttPercentage, DayPercentage);
        -:  518:			
        -:  519:			//10- Calculate the CampaignPercentage
    41193:  520:			campaignReadClass(tempAttribute, tempAttPercentage, CampaignPercentage);
        -:  521:			
        -:  522:			//11- Calculate the PDaysPercentage
    41193:  523:			pdaysReadClass(tempAttribute, tempAttPercentage, PDaysPercentage);
        -:  524:			
        -:  525:			//12- Calculate the PreviousPercentage
    41193:  526:			previousReadClass(tempAttribute, tempAttPercentage, PreviousPercentage);
        -:  527:			
        -:  528:			//13- Calculate the PoutcomePercentage
    41193:  529:			poutcomeReadClass(tempAttribute, tempAttPercentage, PoutcomePercentage);
        -:  530:	
        -:  531:			//14- Calculate the EmpPercentage
    41193:  532:			empReadClass(tempAttribute, tempAttPercentage, EmpPercentage);
        -:  533:			
        -:  534:			//15- Calculate the PricePercentage
    41193:  535:			priceReadClass(tempAttribute, tempAttPercentage, PricePercentage);
        -:  536:			
        -:  537:			//16- Calculate the ConfPercentage
    41193:  538:			confReadClass(tempAttribute, tempAttPercentage, ConfPercentage);
        -:  539:			
        -:  540:			//17- Calculate the Euribor3mPercentage
    41193:  541:			euribor3mReadClass(tempAttribute, tempAttPercentage, Euribor3mPercentage);
        -:  542:			
        -:  543:			//18- Calculate the NrPercentage
    41193:  544:			nrReadClass(tempAttribute, tempAttPercentage, NrPercentage);
        -:  545:			
    41193:  546:			finalPercentageCalculation(tempAttPercentage,NoOutput_Percentage,YesOutput_Percentage);	
        -:  547:			
    41193:  548:			if(NoOutput_Percentage >= YesOutput_Percentage){
    39344:  549:				if(strcmp(tempAttribute[19], "no") == 0)	
    35628:  550:					CorrRate++;
    39344:  551:				fprintf(pOutputFile, "no\n");
        -:  552:			}else{
     1849:  553:				if(strcmp(tempAttribute[19], "yes") == 0)	
      924:  554:					CorrRate++;
     1849:  555:				fprintf(pOutputFile, "yes\n");
        -:  556:			}
        -:  557:			
        -:  558:			
        -:  559:			/*for dubugging
        -:  560:			for(row = 0; row < 2; row ++){
        -:  561:				for(col = 0; col < 18; col ++){
        -:  562:					cout<< "The percentage of the tempAttPercentage table[" << row << "][" << col << "]: " << tempAttPercentage[row][col] <<endl;
        -:  563:				}
        -:  564:			}
        -:  565:			cout<<endl;
        -:  566:			cout<<"Predict No: " << NoOutput_Percentage << endl;
        -:  567:			cout<<"Predict Yes: " << YesOutput_Percentage << endl;
        -:  568:			cout<<endl;
        -:  569:			*/
        -:  570:			
        -:  571:			
        -:  572:		}
        -:  573:		
        -:  574:		//----------------------------------------------------------
        -:  575:		//-------------------End of Bank Data base------------------
        -:  576:		//----------------------------------------------------------
        5:  577:		cout<< "Correct Rate For bank " << numDataSet+1 << " : " << CorrRate / numLine << endl;
        5:  578:		numDataSet++;
        5:  579:		fclose (pFile);
        5:  580:		fclose (pTs);
        5:  581:		fclose (pOutputFile);
        -:  582:	}
        -:  583:	
        -:  584:	//system("PAUSE");
        1:  585:	return 0;
        -:  586:}
        -:  587:
        -:  588://---------------------------------------------------------------
        -:  589://Start of classification (learning) funtions w.r.t the attributes 0 ~ 19
        -:  590://---------------------------------------------------------------
        -:  591:// 0 - age (numeric)
   164814:  592:void ageClass(char tempAttribute[ ][30], int (&numPerAge)[2][5], int &num_Age0, int &num_Age1){
   164814:  593:	int tempAge = atoi(tempAttribute[0]);
   164814:  594:	if(tempAge < 30 && tempAge > 0){
    45368:  595:		if(strcmp(tempAttribute[19],"no") == 0){	
    18994:  596:			numPerAge[0][0]++;	//Label 1	
    18994:  597:			num_Age0++;
        -:  598:		}else{
     3690:  599:			numPerAge[1][0]++;	//Label 2
     3690:  600:			num_Age1++;
        -:  601:		}
   142130:  602:	}else if(tempAge >= 30 && tempAge < 40){
   135526:  603:		if(strcmp(tempAttribute[19],"no") == 0){
    60900:  604:			numPerAge[0][1]++;	//Label 3	
    60900:  605:			num_Age0++;
        -:  606:		}else{
     6863:  607:			numPerAge[1][1]++;	//Label 4		
     6863:  608:			num_Age1++;
        -:  609:		}
    74367:  610:	}else if(tempAge >=40 && tempAge <50){
    84228:  611:		if(strcmp(tempAttribute[19],"no") == 0){
    38775:  612:			numPerAge[0][2]++;	//Label 5		
    38775:  613:			num_Age0++;
        -:  614:		}else{
     3339:  615:			numPerAge[1][2]++;	//Label 6		
     3339:  616:			num_Age1++;
        -:  617:		}
    32253:  618:	}else if(tempAge >=50 && tempAge<65 ){
    59156:  619:		if(strcmp(tempAttribute[19],"no") == 0){
    26151:  620:			numPerAge[0][3]++;	//Label 7		
    26151:  621:			num_Age0++;
        -:  622:		}else{
     3427:  623:			numPerAge[1][3]++;	//Label 8
     3427:  624:			num_Age1++;
        -:  625:		}
     2675:  626:	}else if(tempAge >=65 && tempAge < 140){
     2660:  627:		if(strcmp(tempAttribute[19],"no") == 0){
     1406:  628:			numPerAge[0][4]++;	//Label 9
     1406:  629:			num_Age0++;
        -:  630:		}else{
     1254:  631:			numPerAge[1][4]++;	//Label 10
     1254:  632:			num_Age1++;
        -:  633:		}
        -:  634:	}
   164814:  635:}	
        -:  636:	
        -:  637://1 - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','?') 
   164817:  638:void jobClass(char tempAttribute[ ][30], int (&numPerJob)[2][11], int &num_job0, int &num_job1){
   164817:  639:	if(strcmp(tempAttribute[1],"admin.") == 0){
    41693:  640:		if(strcmp(tempAttribute[19],"no") == 0){
    36284:  641:			numPerJob[0][0]++;			
    36284:  642:			num_job0++;
        -:  643:		}else{
     5409:  644:			numPerJob[1][0]++;			
     5409:  645:			num_job1++;
        -:  646:		}
   123124:  647:	}else if(strcmp(tempAttribute[1],"blue-collar") == 0){
    37021:  648:		if(strcmp(tempAttribute[19],"no") == 0){
    34468:  649:			numPerJob[0][1]++;			
    34468:  650:			num_job0++;
        -:  651:		}else{
     2553:  652:			numPerJob[1][1]++;			
     2553:  653:			num_job1++;
        -:  654:		}
    86103:  655:	}else if(strcmp(tempAttribute[1],"entrepreneur") == 0){
     5830:  656:		if(strcmp(tempAttribute[19],"no") == 0){
     5333:  657:			numPerJob[0][2]++;			
     5333:  658:			num_job0++;
        -:  659:		}else{
      497:  660:			numPerJob[1][2]++;			
      497:  661:			num_job1++;
        -:  662:		}
    80273:  663:	}else if(strcmp(tempAttribute[1],"housemaid") == 0){
     4245:  664:		if(strcmp(tempAttribute[19],"no") == 0){
     3820:  665:			numPerJob[0][3]++;			
     3820:  666:			num_job0++;
        -:  667:		}else{
      425:  668:			numPerJob[1][3]++;
      425:  669:			num_job1++;
        -:  670:		}
    76028:  671:	}else if(strcmp(tempAttribute[1],"management") == 0){
    11701:  672:		if(strcmp(tempAttribute[19],"no") == 0){
    10388:  673:			numPerJob[0][4]++;
    10388:  674:			num_job0++;
        -:  675:		}else{
     1313:  676:			numPerJob[1][4]++;
     1313:  677:			num_job1++;
        -:  678:		}
    64327:  679:	}else if(strcmp(tempAttribute[1],"retired") == 0){
     6884:  680:		if(strcmp(tempAttribute[19],"no") == 0){
     5147:  681:			numPerJob[0][5]++;
     5147:  682:			num_job0++;
        -:  683:		}else{
     1737:  684:			numPerJob[1][5]++;
     1737:  685:			num_job1++;
        -:  686:		}
    57443:  687:	}else if(strcmp(tempAttribute[1],"self-employed") == 0){
     5688:  688:		if(strcmp(tempAttribute[19],"no") == 0){
     5091:  689:			numPerJob[0][6]++;
     5091:  690:			num_job0++;
        -:  691:		}else{
      597:  692:			numPerJob[1][6]++;
      597:  693:			num_job1++;
        -:  694:		}
    51755:  695:	}else if(strcmp(tempAttribute[1],"services") == 0){
    15884:  696:		if(strcmp(tempAttribute[19],"no") == 0){
    14591:  697:			numPerJob[0][7]++;
    14591:  698:			num_job0++;
        -:  699:		}else{
     1293:  700:			numPerJob[1][7]++;
     1293:  701:			num_job1++;
        -:  702:		}
    35871:  703:	}else if(strcmp(tempAttribute[1],"student") == 0){
     3504:  704:		if(strcmp(tempAttribute[19],"no") == 0){
     2403:  705:			numPerJob[0][8]++;
     2403:  706:			num_job0++;
        -:  707:		}else{
     1101:  708:			numPerJob[1][8]++;
     1101:  709:			num_job1++;
        -:  710:		}
    32367:  711:	}else if(strcmp(tempAttribute[1],"technician") == 0){
    26976:  712:		if(strcmp(tempAttribute[19],"no") == 0){
    24055:  713:			numPerJob[0][9]++;
    24055:  714:			num_job0++;
        -:  715:		}else{
     2921:  716:			numPerJob[1][9]++;
     2921:  717:			num_job1++;
        -:  718:		}
     5391:  719:	}else if(strcmp(tempAttribute[1],"unemployed") == 0){
     4060:  720:		if(strcmp(tempAttribute[19],"no") == 0){
     3483:  721:			numPerJob[0][10]++;
     3483:  722:			num_job0++;
        -:  723:		}else{
      577:  724:			numPerJob[1][10]++;
      577:  725:			num_job1++;
        -:  726:		}
        -:  727:	}
   164817:  728:}
        -:  729:
        -:  730://2 - marital : marital status (categorical: 'divorced','married','single','?'; note: 'divorced' means divorced or widowed) 
   164766:  731:void maritalClass(char tempAttribute[ ][30], int (&numPerMat)[2][3], int &num_Mat0, int &num_Mat1){
        -:  732:	//int numPerMat[2][3] = {0}, num_Mat0 = 0, num_Mat1 = 0;
   164766:  733:	if(strcmp(tempAttribute[2],"divorced") == 0){
    18451:  734:		if(strcmp(tempAttribute[19],"no") == 0){
    16546:  735:			numPerMat[0][0]++;
    16546:  736:			num_Mat0++;
        -:  737:		}else{
     1905:  738:			numPerMat[1][0]++;		
     1905:  739:			num_Mat1++;
        -:  740:		}
   146315:  741:	}else if(strcmp(tempAttribute[2],"married") == 0){
    99720:  742:		if(strcmp(tempAttribute[19],"no") == 0){
    89591:  743:			numPerMat[0][1]++;			
    89591:  744:			num_Mat0++;
        -:  745:		}else{
    10129:  746:			numPerMat[1][1]++;			
    10129:  747:			num_Mat1++;
        -:  748:		}
    46595:  749:	}else if(strcmp(tempAttribute[2],"single") == 0){
    46275:  750:		if(strcmp(tempAttribute[19],"no") == 0){
    39794:  751:			numPerMat[0][2]++;			
    39794:  752:			num_Mat0++;
        -:  753:		}else{
     6481:  754:			numPerMat[1][2]++;			
     6481:  755:			num_Mat1++;
        -:  756:		}
        -:  757:	}
   164766:  758:}	
        -:  759:
        -:  760://3 - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','?')
   164784:  761:void eduClass(char tempAttribute[ ][30], int (&numPerEdu)[2][7], int &num_Edu0, int &num_Edu1){
   164784:  762:	if(strcmp(tempAttribute[3],"basic.4y") == 0){
    16707:  763:		if(strcmp(tempAttribute[19],"no") == 0){
    14994:  764:			numPerEdu[0][0]++;
    14994:  765:			num_Edu0++;
        -:  766:		}else{
     1713:  767:			numPerEdu[1][0]++;		
     1713:  768:			num_Edu1++;
        -:  769:		}
   148077:  770:	}else if(strcmp(tempAttribute[3],"basic.6y") == 0){
     9171:  771:		if(strcmp(tempAttribute[19],"no") == 0){
     8418:  772:			numPerEdu[0][1]++;			
     8418:  773:			num_Edu0++;
        -:  774:		}else{
      753:  775:			numPerEdu[1][1]++;			
      753:  776:			num_Edu1++;
        -:  777:		}
   138906:  778:	}else if(strcmp(tempAttribute[3],"basic.9y") == 0){
    24183:  779:		if(strcmp(tempAttribute[19],"no") == 0){
    22290:  780:			numPerEdu[0][2]++;			
    22290:  781:			num_Edu0++;
        -:  782:		}else{
     1893:  783:			numPerEdu[1][2]++;			
     1893:  784:			num_Edu1++;
        -:  785:		}
   114723:  786:	}else if(strcmp(tempAttribute[3],"high.school") == 0){
    38067:  787:		if(strcmp(tempAttribute[19],"no") == 0){
    33942:  788:			numPerEdu[0][3]++;			
    33942:  789:			num_Edu0++;
        -:  790:		}else{
     4125:  791:			numPerEdu[1][3]++;
     4125:  792:			num_Edu1++;
        -:  793:		}
    76656:  794:	}else if(strcmp(tempAttribute[3],"illiterate") == 0){
       76:  795:		if(strcmp(tempAttribute[19],"no") == 0){
       59:  796:			numPerEdu[0][4]++;
       59:  797:			num_Edu0++;
        -:  798:		}else{
       17:  799:			numPerEdu[1][4]++;
       17:  800:			num_Edu1++;
        -:  801:		}
    76580:  802:	}else if(strcmp(tempAttribute[3],"professional.course") == 0){
    20976:  803:		if(strcmp(tempAttribute[19],"no") == 0){
    18595:  804:			numPerEdu[0][5]++;
    18595:  805:			num_Edu0++;
        -:  806:		}else{
     2381:  807:			numPerEdu[1][5]++;
     2381:  808:			num_Edu1++;
        -:  809:		}
    55604:  810:	}else if(strcmp(tempAttribute[3],"university.degree") == 0){
    48676:  811:		if(strcmp(tempAttribute[19],"no") == 0){
    41995:  812:			numPerEdu[0][6]++;
    41995:  813:			num_Edu0++;
        -:  814:		}else{
     6681:  815:			numPerEdu[1][6]++;
     6681:  816:			num_Edu1++;
        -:  817:		}
        -:  818:	}
   164784:  819:}	
        -:  820:
        -:  821://4 - default: has credit in default? (categorical: 'no','yes','?') 
   164763:  822:void defaultClass(char tempAttribute[ ][30], int (&numPerDefault)[2][2], int &num_Def0, int &num_Def1){
        -:  823:	//int numPerDefault[2][2] = {0}, num_Def0 = 0, num_Def1 = 0;
   164763:  824:	if(strcmp(tempAttribute[4],"no") == 0){
   130360:  825:		if(strcmp(tempAttribute[19],"no") == 0){
   113571:  826:			numPerDefault[0][0]++;
   113571:  827:			num_Def0++;
        -:  828:		}else{
    16789:  829:			numPerDefault[1][0]++;		
    16789:  830:			num_Def1++;
        -:  831:		}
    34403:  832:	}else if(strcmp(tempAttribute[4],"yes") == 0){
       15:  833:		if(strcmp(tempAttribute[19],"no") == 0){
       14:  834:			numPerDefault[0][1]++;			
       14:  835:			num_Def0++;
        -:  836:		}else{
        1:  837:			numPerDefault[1][1]++;			
        1:  838:			num_Def1++;
        -:  839:		}
        -:  840:	}
   164763:  841:}
        -:  842:
        -:  843://5 - housing: has housing loan? (categorical: 'no','yes','?')
   164773:  844:void houseClass(char tempAttribute[ ][30], int (&numPerHouse)[2][2], int &num_House0, int &num_House1){
        -:  845:	//int numPerHouse[2][2] = {0}, num_House0 = 0, num_House1 = 0;
   164773:  846:	if(strcmp(tempAttribute[5],"no") == 0){
    74497:  847:		if(strcmp(tempAttribute[19],"no") == 0){
    66392:  848:			numPerHouse[0][0]++;
    66392:  849:			num_House0++;
        -:  850:		}else{
     8105:  851:			numPerHouse[1][0]++;		
     8105:  852:			num_House1++;
        -:  853:		}
    90276:  854:	}else if(strcmp(tempAttribute[5],"yes") == 0){
    86310:  855:		if(strcmp(tempAttribute[19],"no") == 0){
    76281:  856:			numPerHouse[0][1]++;			
    76281:  857:			num_House0++;
        -:  858:		}else{
    10029:  859:			numPerHouse[1][1]++;			
    10029:  860:			num_House1++;
        -:  861:		}
        -:  862:	}
   164773:  863:}
        -:  864:	
        -:  865://6 - loan: has personal loan? (categorical: 'no','yes','?') 
   164763:  866:void loanClass(char tempAttribute[ ][30], int (&numPerLoan)[2][2], int &num_Loan0, int &num_Loan1){
        -:  867:	//int numPerLoan[2][2] = {0}, num_Loan0 = 0, num_Loan1 = 0;
   164763:  868:	if(strcmp(tempAttribute[6],"no") == 0){
   135808:  869:		if(strcmp(tempAttribute[19],"no") == 0){
   120407:  870:			numPerLoan[0][0]++;
   120407:  871:			num_Loan0++;
        -:  872:		}else{
    15401:  873:			numPerLoan[1][0]++;		
    15401:  874:			num_Loan1++;
        -:  875:		}
    28955:  876:	}else if(strcmp(tempAttribute[6],"yes") == 0){
    24995:  877:		if(strcmp(tempAttribute[19],"no") == 0){
    22262:  878:			numPerLoan[0][1]++;			
    22262:  879:			num_Loan0++;
        -:  880:		}else{
     2733:  881:			numPerLoan[1][1]++;			
     2733:  882:			num_Loan1++;
        -:  883:		}
        -:  884:	}
   164763:  885:}	
        -:  886:
        -:  887://7 - contact: contact communication type (categorical: 'cellular','telephone') 
   164773:  888:void contactClass(char tempAttribute[ ][30], int (&numPerCon)[2][2], int &num_Con0, int &num_Con1){
        -:  889:	//int numPerCon[2][2] = {0}, num_Con0 = 0, num_Con1 = 0;
   164773:  890:	if(strcmp(tempAttribute[7],"cellular") == 0){
   104586:  891:		if(strcmp(tempAttribute[19],"no") == 0){
    89173:  892:			numPerCon[0][0]++;
    89173:  893:			num_Con0++;
        -:  894:		}else{
    15413:  895:			numPerCon[1][0]++;		
    15413:  896:			num_Con1++;
        -:  897:		}
    60187:  898:	}else if(strcmp(tempAttribute[7],"telephone") == 0){
    60181:  899:		if(strcmp(tempAttribute[19],"no") == 0){
    57032:  900:			numPerCon[0][1]++;			
    57032:  901:			num_Con0++;
        -:  902:		}else{
     3149:  903:			numPerCon[1][1]++;			
     3149:  904:			num_Con1++;
        -:  905:		}
        -:  906:	}
   164773:  907:}	
        -:  908://8 - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec')
   164793:  909:void monthClass(char tempAttribute[ ][30], int (&numPerMonth)[2][12], int &num_Month0, int &num_Month1){
        -:  910:	//int numPerMonth[2][12] = {0}, num_Month0 = 0, num_Month1 = 0;
   164793:  911:	if(strcmp(tempAttribute[8],"jan") == 0){
        3:  912:		if(strcmp(tempAttribute[19],"no") == 0){
        2:  913:			numPerMonth[0][0]++;
        2:  914:			num_Month0++;
        -:  915:		}else{
        1:  916:			numPerMonth[1][0]++;		
        1:  917:			num_Month1++;
        -:  918:		}
   164790:  919:	}else if(strcmp(tempAttribute[8],"feb") == 0){
        3:  920:		if(strcmp(tempAttribute[19],"no") == 0){
        2:  921:			numPerMonth[0][1]++;			
        2:  922:			num_Month0++;
        -:  923:		}else{
        1:  924:			numPerMonth[1][1]++;			
        1:  925:			num_Month1++;
        -:  926:		}
   164787:  927:	}else if(strcmp(tempAttribute[8],"mar") == 0){
     2187:  928:		if(strcmp(tempAttribute[19],"no") == 0){
     1082:  929:			numPerMonth[0][2]++;			
     1082:  930:			num_Month0++;
        -:  931:		}else{
     1105:  932:			numPerMonth[1][2]++;			
     1105:  933:			num_Month1++;
        -:  934:		}
   162600:  935:	}else if(strcmp(tempAttribute[8],"apr") == 0){
    10531:  936:		if(strcmp(tempAttribute[19],"no") == 0){
     8374:  937:			numPerMonth[0][3]++;			
     8374:  938:			num_Month0++;
        -:  939:		}else{
     2157:  940:			numPerMonth[1][3]++;
     2157:  941:			num_Month1++;
        -:  942:		}
   152069:  943:	}else if(strcmp(tempAttribute[8],"may") == 0){
    55083:  944:		if(strcmp(tempAttribute[19],"no") == 0){
    51538:  945:			numPerMonth[0][4]++;
    51538:  946:			num_Month0++;
        -:  947:		}else{
     3545:  948:			numPerMonth[1][4]++;
     3545:  949:			num_Month1++;
        -:  950:		}
    96986:  951:	}else if(strcmp(tempAttribute[8],"jun") == 0){
    21275:  952:		if(strcmp(tempAttribute[19],"no") == 0){
    19038:  953:			numPerMonth[0][5]++;
    19038:  954:			num_Month0++;
        -:  955:		}else{
     2237:  956:			numPerMonth[1][5]++;
     2237:  957:			num_Month1++;
        -:  958:		}
    75711:  959:	}else if(strcmp(tempAttribute[8],"jul") == 0){
    28699:  960:		if(strcmp(tempAttribute[19],"no") == 0){
    26102:  961:			numPerMonth[0][6]++;
    26102:  962:			num_Month0++;
        -:  963:		}else{
     2597:  964:			numPerMonth[1][6]++;
     2597:  965:			num_Month1++;
        -:  966:		}
    47012:  967:	}else if(strcmp(tempAttribute[8],"aug") == 0){
    24716:  968:		if(strcmp(tempAttribute[19],"no") == 0){
    22095:  969:			numPerMonth[0][7]++;
    22095:  970:			num_Month0++;
        -:  971:		}else{
     2621:  972:			numPerMonth[1][7]++;
     2621:  973:			num_Month1++;
        -:  974:		}
    22296:  975:	}else if(strcmp(tempAttribute[8],"sep") == 0){
     2283:  976:		if(strcmp(tempAttribute[19],"no") == 0){
     1258:  977:			numPerMonth[0][8]++;
     1258:  978:			num_Month0++;
        -:  979:		}else{
     1025:  980:			numPerMonth[1][8]++;
     1025:  981:			num_Month1++;
        -:  982:		}
    20013:  983:	}else if(strcmp(tempAttribute[8],"oct") == 0){
     2875:  984:		if(strcmp(tempAttribute[19],"no") == 0){
     1614:  985:			numPerMonth[0][9]++;
     1614:  986:			num_Month0++;
        -:  987:		}else{
     1261:  988:			numPerMonth[1][9]++;
     1261:  989:			num_Month1++;
        -:  990:		}
    17138:  991:	}else if(strcmp(tempAttribute[8],"nov") == 0){
    16407:  992:		if(strcmp(tempAttribute[19],"no") == 0){
    14742:  993:			numPerMonth[0][10]++;
    14742:  994:			num_Month0++;
        -:  995:		}else{
     1665:  996:			numPerMonth[1][10]++;
     1665:  997:			num_Month1++;
        -:  998:		}
      731:  999:	}else if(strcmp(tempAttribute[8],"dec") == 0){
      731: 1000:		if(strcmp(tempAttribute[19],"no") == 0){
      374: 1001:			numPerMonth[0][11]++;
      374: 1002:			num_Month0++;
        -: 1003:		}else{
      357: 1004:			numPerMonth[1][11]++;
      357: 1005:			num_Month1++;
        -: 1006:		}
        -: 1007:	}
   164793: 1008:}	
        -: 1009:	
        -: 1010://9 - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri') 
   164787: 1011:void dayClass(char tempAttribute[ ][30], int (&numPerDay)[2][5], int &num_Day0, int &num_Day1){
        -: 1012:	//int numPerDay[2][5] = {0}, num_Day0 = 0, num_Day1 = 0;
   164787: 1013:	if(strcmp(tempAttribute[9],"mon") == 0){
    34060: 1014:		if(strcmp(tempAttribute[19],"no") == 0){
    30671: 1015:			numPerDay[0][0]++;
    30671: 1016:			num_Day0++;
        -: 1017:		}else{
     3389: 1018:			numPerDay[1][0]++;		
     3389: 1019:			num_Day1++;
        -: 1020:		}
   130727: 1021:	}else if(strcmp(tempAttribute[9],"tue") == 0){
    32368: 1022:		if(strcmp(tempAttribute[19],"no") == 0){
    28555: 1023:			numPerDay[0][1]++;			
    28555: 1024:			num_Day0++;
        -: 1025:		}else{
     3813: 1026:			numPerDay[1][1]++;			
     3813: 1027:			num_Day1++;
        -: 1028:		}
    98359: 1029:	}else if(strcmp(tempAttribute[9],"wed") == 0){
    32542: 1030:		if(strcmp(tempAttribute[19],"no") == 0){
    28745: 1031:			numPerDay[0][2]++;			
    28745: 1032:			num_Day0++;
        -: 1033:		}else{
     3797: 1034:			numPerDay[1][2]++;			
     3797: 1035:			num_Day1++;
        -: 1036:		}
    65817: 1037:	}else if(strcmp(tempAttribute[9],"thu") == 0){
    34497: 1038:		if(strcmp(tempAttribute[19],"no") == 0){
    30316: 1039:			numPerDay[0][3]++;			
    30316: 1040:			num_Day0++;
        -: 1041:		}else{
     4181: 1042:			numPerDay[1][3]++;
     4181: 1043:			num_Day1++;
        -: 1044:		}
    31320: 1045:	}else if(strcmp(tempAttribute[9],"fri") == 0){
    31313: 1046:		if(strcmp(tempAttribute[19],"no") == 0){
    27928: 1047:			numPerDay[0][4]++;
    27928: 1048:			num_Day0++;
        -: 1049:		}else{
     3385: 1050:			numPerDay[1][4]++;
     3385: 1051:			num_Day1++;
        -: 1052:		}
        -: 1053:	}
   164787: 1054:}
        -: 1055:
        -: 1056:/*10 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact) 
        -: 1057:			- 3 intervals: (0 ~ 3), (4~6), (7+)	*/
   164780: 1058:void tempCampaignClass(char tempAttribute[ ][30], int (&numPerCampaign)[2][3], int &num_Campaign0, int &num_Campaign1){	
        -: 1059:	//int tempCampaign, numPerCampaign[2][3] = {0}, num_Campaign0 = 0, num_Campaign1 = 0;
   164780: 1060:	int tempCampaign = atoi(tempAttribute[10]);
   164780: 1061:	if(tempCampaign <= 3 && tempCampaign >= 0){
   268438: 1062:		if(strcmp(tempAttribute[19],"no") == 0){
   117878: 1063:			numPerCampaign[0][0]++;			
   117878: 1064:			num_Campaign0++;
        -: 1065:		}else{
    16341: 1066:			numPerCampaign[1][0]++;			
    16341: 1067:			num_Campaign1++;
        -: 1068:		}
    30561: 1069:	}else if(tempCampaign >= 4 && tempCampaign <= 6){
    41852: 1070:		if(strcmp(tempAttribute[19],"no") == 0){
    19149: 1071:			numPerCampaign[0][1]++;			
    19149: 1072:			num_Campaign0++;
        -: 1073:		}else{
     1777: 1074:			numPerCampaign[1][1]++;			
     1777: 1075:			num_Campaign1++;
        -: 1076:		}
     9635: 1077:	}else if(tempCampaign >= 7){
     9630: 1078:		if(strcmp(tempAttribute[19],"no") == 0){
     9185: 1079:			numPerCampaign[0][2]++;			
     9185: 1080:			num_Campaign0++;
        -: 1081:		}else{
      445: 1082:			numPerCampaign[1][2]++;			
      445: 1083:			num_Campaign1++;
        -: 1084:		}
        -: 1085:	}
   164780: 1086:}	
        -: 1087:	
        -: 1088://11 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted) 
        -: 1089://			- 4 intervals: (0~11), (12~20), (21 ~ 27), (999) 
   164805: 1090:void tempPDaysClass(char tempAttribute[ ][30], int (&numPerPDays)[2][4], int &num_PDays0, int &num_PDays1){		
        -: 1091:	//int tempPDays, numPerPDays[2][4] = {0}, num_PDays0 = 0, num_PDays1 = 0;
   164805: 1092:	int tempPDays = atoi(tempAttribute[11]);
   164805: 1093:	if(tempPDays <= 11 && tempPDays >= 0){
    10738: 1094:		if(strcmp(tempAttribute[19],"no") == 0){
     1902: 1095:			numPerPDays[0][0]++;			
     1902: 1096:			num_PDays0++;
        -: 1097:		}else{
     3467: 1098:			numPerPDays[1][0]++;			
     3467: 1099:			num_PDays1++;
        -: 1100:		}
   159436: 1101:	}else if(tempPDays >= 12 && tempPDays <= 20){
     1370: 1102:		if(strcmp(tempAttribute[19],"no") == 0){
      306: 1103:			numPerPDays[0][1]++;			
      306: 1104:			num_PDays0++;
        -: 1105:		}else{
      379: 1106:			numPerPDays[1][1]++;			
      379: 1107:			num_PDays1++;
        -: 1108:		}
   158751: 1109:	}else if(tempPDays >= 21 && tempPDays <= 28){
       84: 1110:		if(strcmp(tempAttribute[19],"no") == 0){
       11: 1111:			numPerPDays[0][2]++;			
       11: 1112:			num_PDays0++;
        -: 1113:		}else{
       31: 1114:			numPerPDays[1][2]++;			
       31: 1115:			num_PDays1++;
        -: 1116:		}
   158709: 1117:	}else if(tempPDays == 999){
   158701: 1118:		if(strcmp(tempAttribute[19],"no") == 0){
   144008: 1119:			numPerPDays[0][3]++;			
   144008: 1120:			num_PDays0++;
        -: 1121:		}else{
    14693: 1122:			numPerPDays[1][3]++;			
    14693: 1123:			num_PDays1++;
        -: 1124:		}
        -: 1125:	}
   164805: 1126:}	
        -: 1127:	
        -: 1128://12 - previous: number of contacts performed before this campaign and for this client (numeric) 
        -: 1129://			- intervals: 0, (not 0)
   164763: 1130:void tempPreviousClass(char tempAttribute[ ][30], int (&numPerPrevious)[2][2], int &num_Previous0, int &num_Previous1){			
        -: 1131:	//int tempPrevious, numPerPrevious[2][2] = {0}, num_Previous0 = 0, num_Previous1 = 0;
   164763: 1132:	int tempPrevious = atoi(tempAttribute[12]);
   164763: 1133:	if(tempPrevious == 0){
   142256: 1134:		if(strcmp(tempAttribute[19],"no") == 0){
   129691: 1135:			numPerPrevious[0][0]++;			
   129691: 1136:			num_Previous0++;
        -: 1137:		}else{
    12565: 1138:			numPerPrevious[1][0]++;			
    12565: 1139:			num_Previous1++;
        -: 1140:		}
    22507: 1141:	}else if(tempPrevious != 0){
    22507: 1142:		if(strcmp(tempAttribute[19],"no") == 0){
    16510: 1143:			numPerPrevious[0][1]++;			
    16510: 1144:			num_Previous0++;
        -: 1145:		}else{
     5997: 1146:			numPerPrevious[1][1]++;			
     5997: 1147:			num_Previous1++;
        -: 1148:		}
        -: 1149:	}
   164763: 1150:}	
        -: 1151:	
        -: 1152://13 - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success') 
        -: 1153://			- intervals: shown as above.
   164782: 1154:void numPerPoutcomeClass(char tempAttribute[ ][30], int (&numPerPoutcome)[2][3], int &num_Poutcome0, int &num_Poutcome1){			
        -: 1155:	//int numPerPoutcome[2][3] = {0}, num_Poutcome0 = 0, num_Poutcome1 = 0;
   164782: 1156:	if(strcmp(tempAttribute[13],"failure") == 0){
    17017: 1157:		if(strcmp(tempAttribute[19],"no") == 0){
    14596: 1158:			numPerPoutcome[0][0]++;
    14596: 1159:			num_Poutcome0++;
        -: 1160:		}else{
     2421: 1161:			numPerPoutcome[1][0]++;		
     2421: 1162:			num_Poutcome1++;
        -: 1163:		}
   147765: 1164:	}else if(strcmp(tempAttribute[13],"nonexistent") == 0){
   142258: 1165:		if(strcmp(tempAttribute[19],"no") == 0){
   129693: 1166:			numPerPoutcome[0][1]++;			
   129693: 1167:			num_Poutcome0++;
        -: 1168:		}else{
    12565: 1169:			numPerPoutcome[1][1]++;			
    12565: 1170:			num_Poutcome1++;
        -: 1171:		}
     5507: 1172:	}else if(strcmp(tempAttribute[13],"success") == 0){
     5497: 1173:		if(strcmp(tempAttribute[19],"no") == 0){
     1920: 1174:			numPerPoutcome[0][2]++;			
     1920: 1175:			num_Poutcome0++;
        -: 1176:		}else{
     3577: 1177:			numPerPoutcome[1][2]++;			
     3577: 1178:			num_Poutcome1++;
        -: 1179:		}
        -: 1180:	}
   164782: 1181:}	
        -: 1182:	
        -: 1183://14 - emp.var.rate: employment variation rate - quarterly indicator (numeric) 
        -: 1184://			- 4 intervals: (x>=1.0), (-1.0<= x < 1.0) , (-2.0<= x <-1.0) , (x < -2.0)
   164778: 1185:void tempEmpClass(char tempAttribute[ ][30], int (&numPerEmp)[2][6], int &num_Emp0, int &num_Emp1){			
        -: 1186:	//float tempEmp; int numPerEmp[2][6] = {0}, num_Emp0 = 0, num_Emp1 = 0;
   164778: 1187:	float tempEmp = atof(tempAttribute[14]);
   164778: 1188:	if(tempEmp >= 1.00){
    95994: 1189:		if(strcmp(tempAttribute[19],"no") == 0){
    91569: 1190:			numPerEmp[0][0]++;			
    91569: 1191:			num_Emp0++;
        -: 1192:		}else{
     4425: 1193:			numPerEmp[1][0]++;			
     4425: 1194:			num_Emp1++;
        -: 1195:		}
    68784: 1196:	}else if(tempEmp >= -1.0 && tempEmp < 1.0){
    29554: 1197:		if(strcmp(tempAttribute[19],"no") == 0){
    13844: 1198:			numPerEmp[0][1]++;			
    13844: 1199:			num_Emp0++;
        -: 1200:		}else{
      933: 1201:			numPerEmp[1][1]++;			
      933: 1202:			num_Emp1++;
        -: 1203:		}
    54007: 1204:	}else if(tempEmp >= -2.0 && tempEmp < -1.0){
    84756: 1205:		if(strcmp(tempAttribute[19],"no") == 0){
    33717: 1206:			numPerEmp[0][2]++;			
    33717: 1207:			num_Emp0++;
        -: 1208:		}else{
     8661: 1209:			numPerEmp[1][2]++;			
     8661: 1210:			num_Emp1++;
        -: 1211:		}
    11629: 1212:	}else if(tempEmp < -2.0){
    11629: 1213:		if(strcmp(tempAttribute[19],"no") == 0){
     7084: 1214:			numPerEmp[0][3]++;			
     7084: 1215:			num_Emp0++;
        -: 1216:		}else{
     4545: 1217:			numPerEmp[1][3]++;			
     4545: 1218:			num_Emp1++;
        -: 1219:		}
        -: 1220:	}
   164778: 1221:}
        -: 1222:
        -: 1223://15 - cons.price.idx: consumer price index - monthly indicator (numeric)
        -: 1224://			- 3 intervals: (2000 > x>=94.45), (92.8 < x < 94.45), (0 <= x <= 92.8)
   164787: 1225:void tempPriceClass(char tempAttribute[ ][30], int (&numPerPrice)[2][3], int &num_Price0, int &num_Price1){
        -: 1226:	//double tempPrice; int numPerPrice[2][3] = {0}, num_Price0 = 0, num_Price1 = 0;
   164787: 1227:	double tempPrice = strtod(tempAttribute[15], NULL);
   164787: 1228:	if(tempPrice >= 94.45 && tempPrice < 2000){
    37658: 1229:		if(strcmp(tempAttribute[19],"no") == 0){
    17472: 1230:			numPerPrice[0][0]++;			
    17472: 1231:			num_Price0++;
        -: 1232:		}else{
     1357: 1233:			numPerPrice[1][0]++;			
     1357: 1234:			num_Price1++;
        -: 1235:		}
   145958: 1236:	}else if(tempPrice > 92.8 && tempPrice < 94.45){
   274276: 1237:		if(strcmp(tempAttribute[19],"no") == 0){
   123424: 1238:			numPerPrice[0][1]++;			
   123424: 1239:			num_Price0++;
        -: 1240:		}else{
    13714: 1241:			numPerPrice[1][1]++;			
    13714: 1242:			num_Price1++;
        -: 1243:		}
     8820: 1244:	}else if(tempPrice <= 92.8 && tempPrice >= 0){
     8815: 1245:		if(strcmp(tempAttribute[19],"no") == 0){
     5320: 1246:			numPerPrice[0][2]++;			
     5320: 1247:			num_Price0++;
        -: 1248:		}else{
     3495: 1249:			numPerPrice[1][2]++;			
     3495: 1250:			num_Price1++;
        -: 1251:		}
        -: 1252:	}
   164787: 1253:}	
        -: 1254:	
        -: 1255:	
        -: 1256://16 - cons.conf.idx: consumer confidence index - monthly indicator (numeric) 
        -: 1257://			- 4 intervals: (x>-30.0), (-35.0<= x < -30.0), (-45.0< = x < -35.0), ( x < -45.0)
   164778: 1258:void tempConfClass(char tempAttribute[ ][30], int (&numPerConf)[2][4], int &num_Conf0, int &num_Conf1){
        -: 1259:	//float tempConf; int numPerConf[2][6] = {0}, num_Conf0 = 0, num_Conf1 = 0;
   164778: 1260:	float tempConf = atof(tempAttribute[16]);
   164778: 1261:	if(tempConf >= -30.0){
     2861: 1262:		if(strcmp(tempAttribute[19],"no") == 0){
     1716: 1263:			numPerConf[0][0]++;			
     1716: 1264:			num_Conf0++;
        -: 1265:		}else{
     1145: 1266:			numPerConf[1][0]++;			
     1145: 1267:			num_Conf1++;
        -: 1268:		}
   161917: 1269:	}else if(tempConf >= -35.0 && tempConf < -30.0){
    15330: 1270:		if(strcmp(tempAttribute[19],"no") == 0){
     4332: 1271:			numPerConf[0][1]++;			
     4332: 1272:			num_Conf0++;
        -: 1273:		}else{
     3333: 1274:			numPerConf[1][1]++;			
     3333: 1275:			num_Conf1++;
        -: 1276:		}
   154252: 1277:	}else if(tempConf >= -45.0 && tempConf < -35.0){
   237478: 1278:		if(strcmp(tempAttribute[19],"no") == 0){
   109630: 1279:			numPerConf[0][2]++;			
   109630: 1280:			num_Conf0++;
        -: 1281:		}else{
     9109: 1282:			numPerConf[1][2]++;			
     9109: 1283:			num_Conf1++;
        -: 1284:		}
    35513: 1285:	}else if(tempConf < -45.0){
    35513: 1286:		if(strcmp(tempAttribute[19],"no") == 0){
    30536: 1287:			numPerConf[0][3]++;			
    30536: 1288:			num_Conf0++;
        -: 1289:		}else{
     4977: 1290:			numPerConf[1][3]++;			
     4977: 1291:			num_Conf1++;
        -: 1292:		}
        -: 1293:	}
   164778: 1294:}
        -: 1295:
        -: 1296://May 30th.
        -: 1297://17 - euribor3m: euribor 3 month rate - daily indicator (numeric) 
        -: 1298://			- 4 intervals: (x >= 4.86), ( 4.0 <= x < 4.86), ( 1.0 <= x < 4.0), , ( 0 < x < 1.0)
   164805: 1299:void tempEuribor3mClass(char tempAttribute[ ][30], int (&numPerEuribor3m)[2][4], int &num_Euribor3m0, int &num_Euribor3m1){
        -: 1300:	//float tempEuribor3m; int numPerEuribor3m[2][4] = {0}, num_Euribor3m0 = 0, num_Euribor3m1 = 0;
   164805: 1301:	double tempEuribor3m = strtod(tempAttribute[17],NULL);
   164805: 1302:	if(tempEuribor3m >= 4.86){
    70458: 1303:		if(strcmp(tempAttribute[19],"no") == 0){
    66636: 1304:			numPerEuribor3m[0][0]++;			
    66636: 1305:			num_Euribor3m0++;
        -: 1306:		}else{
     3822: 1307:			numPerEuribor3m[1][0]++;			
     3822: 1308:			num_Euribor3m1++;
        -: 1309:		}
    94347: 1310:	}else if(tempEuribor3m >= 4.0 && tempEuribor3m < 4.86){
    80536: 1311:		if(strcmp(tempAttribute[19],"no") == 0){
    38733: 1312:			numPerEuribor3m[0][1]++;			
    38733: 1313:			num_Euribor3m0++;
        -: 1314:		}else{
     1535: 1315:			numPerEuribor3m[1][1]++;			
     1535: 1316:			num_Euribor3m1++;
        -: 1317:		}
    54079: 1318:	}else if(tempEuribor3m >= 1.0 && tempEuribor3m < 4.0){
    77010: 1319:		if(strcmp(tempAttribute[19],"no") == 0){
    32406: 1320:			numPerEuribor3m[0][2]++;			
    32406: 1321:			num_Euribor3m0++;
        -: 1322:		}else{
     6099: 1323:			numPerEuribor3m[1][2]++;			
     6099: 1324:			num_Euribor3m1++;
        -: 1325:		}
    15574: 1326:	}else if(tempEuribor3m < 1.0 && tempEuribor3m >0){
    15568: 1327:		if(strcmp(tempAttribute[19],"no") == 0){
     8454: 1328:			numPerEuribor3m[0][3]++;			
     8454: 1329:			num_Euribor3m0++;
        -: 1330:		}else{
     7114: 1331:			numPerEuribor3m[1][3]++;			
     7114: 1332:			num_Euribor3m1++;
        -: 1333:		}
        -: 1334:	}
   164805: 1335:}
        -: 1336:
        -: 1337://18 - nr.employed: number of employees - quarterly indicator (numeric) 
        -: 1338://			- 2 intervals: (x > 5200.0), (x <= 5200.0)
   164763: 1339:void tempNrClass(char tempAttribute[ ][30], int (&numPerNr)[2][2], int &num_Nr0, int &num_Nr1){
        -: 1340:	//int tempNr, numPerNr[2][2] = {0}, num_Nr0 = 0, num_Nr1 = 0;
   164763: 1341:	float tempNr = atof(tempAttribute[18]);
   164763: 1342:	if(tempNr > 5200.0){
    64940: 1343:		if(strcmp(tempAttribute[19],"no") == 0){
    61475: 1344:			numPerNr[0][0]++;			
    61475: 1345:			num_Nr0++;
        -: 1346:		}else{
     3465: 1347:			numPerNr[1][0]++;			
     3465: 1348:			num_Nr1++;
        -: 1349:		}
    99823: 1350:	}else if(tempNr <= 5200.0){
    99823: 1351:		if(strcmp(tempAttribute[19],"no") == 0){
    84726: 1352:			numPerNr[0][1]++;			
    84726: 1353:			num_Nr0++;
        -: 1354:		}else{
    15097: 1355:			numPerNr[1][1]++;			
    15097: 1356:			num_Nr1++;
        -: 1357:		}
        -: 1358:	}
   164763: 1359:}
        -: 1360:	
        -: 1361://19 - y - has the client subscribed a term deposit? (binary: 'no','yes') 
        -: 1362://			- 2 intervals: yes or no
   164769: 1363:void numPerOutputClass(char tempAttribute[ ][30], int (&numPerOutput)[2]){	
        -: 1364:	//int numPerOutput[2] = {0};
   164769: 1365:	if(strcmp(tempAttribute[19],"no") == 0){
   146201: 1366:		numPerOutput[0]++;			
    18568: 1367:	}else if(strcmp(tempAttribute[19],"yes") == 0){
    18564: 1368:		numPerOutput[1]++;
        -: 1369:	}
   164769: 1370:}	
        -: 1371://---------------------------------------------------------------
        -: 1372://End of classification (learning) funtions w.r.t the attributes 0 ~ 19
        -: 1373://---------------------------------------------------------------
        -: 1374://---------------------------------------------------------------
        -: 1375://Start of calculation for training data 
        -: 1376://---------------------------------------------------------------
        -: 1377:/*
        -: 1378:	//0- Calculating the Age percentage and store it in AgePercentage[row][col], with respect to numPerAge[row][col] along with num_Age0 and num_Age1.
        -: 1379:	for(row = 0;row<2;row++){
        -: 1380:		for(col = 0;col<5;col++){
        -: 1381:			if(row==0)
        -: 1382:				AgePercentage[row][col] = (float) numPerAge[row][col] / num_job0;
        -: 1383:			else
        -: 1384:				AgePercentage[row][col] = (float) numPerAge[row][col] / num_job1;
        -: 1385:		}
        -: 1386:	}
        -: 1387:	
        -: 1388:	//1- Calculate the Job percentage
        -: 1389:	for(row = 0;row<2;row++){
        -: 1390:		for(col = 0;col<11;col++){
        -: 1391:			if(row==0)
        -: 1392:				JobPercentage[row][col] = (float) numPerJob[row][col] / num_Age0;
        -: 1393:			else
        -: 1394:				JobPercentage[row][col] = (float) numPerJob[row][col] / num_Age1;
        -: 1395:		}
        -: 1396:	}
        -: 1397:	
        -: 1398:	//2- Calculate the Material percentage
        -: 1399:	for(row = 0;row<2;row++){
        -: 1400:		for(col = 0;col<3;col++){
        -: 1401:			if(row==0)
        -: 1402:				MaterialPercentage[row][col] = (float) numPerMat[row][col] / num_Mat0;
        -: 1403:			else
        -: 1404:				MaterialPercentage[row][col] = (float) numPerMat[row][col] / num_Mat1;
        -: 1405:		}
        -: 1406:	}
        -: 1407:	
        -: 1408:	//3- Calculate the Education Percentage
        -: 1409:	for(row = 0;row<2;row++){
        -: 1410:		for(col = 0;col<7;col++){
        -: 1411:			if(row==0)
        -: 1412:				EducationPercentage[row][col] = (float) numPerEdu[row][col] / num_Edu0;
        -: 1413:			else
        -: 1414:				EducationPercentage[row][col] = (float) numPerEdu[row][col] / num_Edu1;
        -: 1415:		}
        -: 1416:	}
        -: 1417:
        -: 1418:	
        -: 1419:	//4- Calculate the Default percentage
        -: 1420:	for(row = 0;row<2;row++){
        -: 1421:		for(col = 0;col<2;col++){
        -: 1422:			if(row==0)
        -: 1423:				DefaultPercentage[row][col] = (float) numPerDefault[row][col] / num_Def0;
        -: 1424:			else
        -: 1425:				DefaultPercentage[row][col] = (float) numPerDefault[row][col] / num_Def1;
        -: 1426:		}
        -: 1427:	}
        -: 1428:	
        -: 1429:	//5- Calculate the housing percentage
        -: 1430:	for(row = 0;row<2;row++){
        -: 1431:		for(col = 0;col<2;col++){
        -: 1432:			if(row==0)
        -: 1433:				HousePercentage[row][col] = (float) numPerHouse[row][col] / num_House0;
        -: 1434:			else
        -: 1435:				HousePercentage[row][col] = (float) numPerHouse[row][col] / num_House1;
        -: 1436:		}
        -: 1437:	}
        -: 1438:	
        -: 1439:	//6- Calculate the loan percentage
        -: 1440:	for(row = 0;row<2;row++){
        -: 1441:		for(col = 0;col<2;col++){
        -: 1442:			if(row==0)
        -: 1443:				LoanPercentage[row][col] = (float) numPerLoan[row][col] / num_Loan0;
        -: 1444:			else
        -: 1445:				LoanPercentage[row][col] = (float) numPerLoan[row][col] / num_Loan1;
        -: 1446:		}
        -: 1447:	}
        -: 1448:	
        -: 1449:	//7- Calculate the ContactPercentage
        -: 1450:	for(row = 0;row<2;row++){
        -: 1451:		for(col = 0;col<2;col++){
        -: 1452:			if(row==0)
        -: 1453:				ContactPercentage[row][col] = (float) numPerCon[row][col] / num_Con0;
        -: 1454:			else
        -: 1455:				ContactPercentage[row][col] = (float) numPerCon[row][col] / num_Con1;
        -: 1456:		}
        -: 1457:	}
        -: 1458:	
        -: 1459:	//8- Calculate the MonthPercentage
        -: 1460:	for(row = 0;row<2;row++){
        -: 1461:		for(col = 0;col<12;col++){
        -: 1462:			if(row==0)
        -: 1463:				MonthPercentage[row][col] = (float) numPerMonth[row][col] / num_Month0;
        -: 1464:			else
        -: 1465:				MonthPercentage[row][col] = (float) numPerMonth[row][col] / num_Month1;
        -: 1466:		}
        -: 1467:	}
        -: 1468:	
        -: 1469:	//9- Calculate the DayPercentage
        -: 1470:	for(row = 0;row<2;row++){
        -: 1471:		for(col = 0;col<5;col++){
        -: 1472:			if(row==0)
        -: 1473:				DayPercentage[row][col] = (float) numPerDay[row][col] / num_Day0;
        -: 1474:			else
        -: 1475:				DayPercentage[row][col] = (float) numPerDay[row][col] / num_Day1;
        -: 1476:		}
        -: 1477:	}
        -: 1478:	
        -: 1479:	//10- Calculate the CampaignPercentage
        -: 1480:	for(row = 0;row<2;row++){
        -: 1481:		for(col = 0;col<3;col++){
        -: 1482:			if(row==0)
        -: 1483:				CampaignPercentage[row][col] = (float) numPerCampaign[row][col] / num_Campaign0;
        -: 1484:			else
        -: 1485:				CampaignPercentage[row][col] = (float) numPerCampaign[row][col] / num_Campaign1;
        -: 1486:		}
        -: 1487:	}
        -: 1488:	
        -: 1489:	//11- Calculate the PDaysPercentage
        -: 1490:	for(row = 0;row<2;row++){
        -: 1491:		for(col = 0;col<4;col++){
        -: 1492:			if(row==0)
        -: 1493:				PDaysPercentage[row][col] = (float) numPerPDays[row][col] / num_PDays0;
        -: 1494:			else
        -: 1495:				PDaysPercentage[row][col] = (float) numPerPDays[row][col] / num_PDays1;
        -: 1496:		}
        -: 1497:	}
        -: 1498:	
        -: 1499:	//12- Calculate the PreviousPercentage
        -: 1500:	for(row = 0;row<2;row++){
        -: 1501:		for(col = 0;col<2;col++){
        -: 1502:			if(row==0)
        -: 1503:				PreviousPercentage[row][col] = (float) numPerPrevious[row][col] / num_Previous0;
        -: 1504:			else
        -: 1505:				PreviousPercentage[row][col] = (float) numPerPrevious[row][col] / num_Previous1;
        -: 1506:		}
        -: 1507:	}
        -: 1508:	
        -: 1509:	//13- Calculate the PoutcomePercentage
        -: 1510:	for(row = 0;row<2;row++){
        -: 1511:		for(col = 0;col<3;col++){
        -: 1512:			if(row==0)
        -: 1513:				PoutcomePercentage[row][col] = (float) numPerPoutcome[row][col] / num_Poutcome0;
        -: 1514:			else
        -: 1515:				PoutcomePercentage[row][col] = (float) numPerPoutcome[row][col] / num_Poutcome1;
        -: 1516:		}
        -: 1517:	}
        -: 1518:
        -: 1519:	//14- Calculate the EmpPercentage
        -: 1520:	for(row = 0;row<2;row++){
        -: 1521:		for(col = 0;col<4;col++){
        -: 1522:			if(row==0)
        -: 1523:				EmpPercentage[row][col] = (float) numPerEmp[row][col] / num_Emp0;
        -: 1524:			else
        -: 1525:				EmpPercentage[row][col] = (float) numPerEmp[row][col] / num_Emp1;
        -: 1526:		}
        -: 1527:	}
        -: 1528:	
        -: 1529:	//15- Calculate the PricePercentage
        -: 1530:	for(row = 0;row<2;row++){
        -: 1531:		for(col = 0;col<3;col++){
        -: 1532:			if(row==0)
        -: 1533:				PricePercentage[row][col] = (float) numPerPrice[row][col] / num_Price0;
        -: 1534:			else
        -: 1535:				PricePercentage[row][col] = (float) numPerPrice[row][col] / num_Price1;
        -: 1536:		}
        -: 1537:	}
        -: 1538:	
        -: 1539:	//16- Calculate the ConfPercentage
        -: 1540:	for(row = 0;row<2;row++){
        -: 1541:		for(col = 0;col<4;col++){
        -: 1542:			if(row==0)
        -: 1543:				ConfPercentage[row][col] = (float) numPerConf[row][col] / num_Conf0;
        -: 1544:			else
        -: 1545:				ConfPercentage[row][col] = (float) numPerConf[row][col] / num_Conf1;
        -: 1546:		}
        -: 1547:	}
        -: 1548:	
        -: 1549:	//17- Calculate the Euribor3mPercentage
        -: 1550:	for(row = 0;row<2;row++){
        -: 1551:		for(col = 0;col<4;col++){
        -: 1552:			if(row==0)
        -: 1553:				Euribor3mPercentage[row][col] = (float) numPerEuribor3m[row][col] / num_Euribor3m0;
        -: 1554:			else
        -: 1555:				Euribor3mPercentage[row][col] = (float) numPerEuribor3m[row][col] / num_Euribor3m1;
        -: 1556:		}
        -: 1557:	}
        -: 1558:	
        -: 1559:	//18- Calculate the NrPercentage
        -: 1560:	for(row = 0;row<2;row++){
        -: 1561:		for(col = 0;col<2;col++){
        -: 1562:			if(row==0)
        -: 1563:				NrPercentage[row][col] = (float) numPerNr[row][col] / num_Nr0;
        -: 1564:			else
        -: 1565:				NrPercentage[row][col] = (float) numPerNr[row][col] / num_Nr1;
        -: 1566:		}
        -: 1567:	}
        -: 1568:	
        -: 1569:	//19- Calculate the OutputPercentage
        -: 1570:	//cout<<"\nnumber of data: "<<numData<<"; "<<numPerOutput[0]<<"; "<<numPerOutput[1]<<endl;
        -: 1571:	OutputPercentage[0] =  (float) numPerOutput[0] / numData;
        -: 1572:	OutputPercentage[1] =  (float) numPerOutput[1] / numData;
        -: 1573:*/
        -: 1574://---------------------------------------------------------------
        -: 1575://End of calculation for training data 
        -: 1576://---------------------------------------------------------------
        -: 1577://---------------------------------------------------------------
        -: 1578://Start of reading test data from the database
        -: 1579://---------------------------------------------------------------
    41193: 1580:void  ageReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float AgePercentage[][5]){
    41193: 1581:	int tempAge = atoi(tempAttribute[0]);
    41193: 1582:	if(tempAge < 30){
     5674: 1583:		tempAttPercentage[0][0] = AgePercentage[0][0];
     5674: 1584:		tempAttPercentage[1][0] = AgePercentage[1][0];
    35519: 1585:	}else if(tempAge >= 30 && tempAge < 40){
    16938: 1586:		tempAttPercentage[0][0] = AgePercentage[0][1];
    16938: 1587:		tempAttPercentage[1][0] = AgePercentage[1][1];
    18581: 1588:	}else if(tempAge >=40 && tempAge <50){
    10526: 1589:		tempAttPercentage[0][0] = AgePercentage[0][2];
    10526: 1590:		tempAttPercentage[1][0] = AgePercentage[1][2];
     8055: 1591:	}else if(tempAge >=50 && tempAge<65 ){
     7392: 1592:		tempAttPercentage[0][0] = AgePercentage[0][3];
     7392: 1593:		tempAttPercentage[1][0] = AgePercentage[1][3];
      663: 1594:	}else if(tempAge >65){
      619: 1595:		tempAttPercentage[0][0] = AgePercentage[0][4];
      619: 1596:		tempAttPercentage[1][0] = AgePercentage[1][4];
        -: 1597:	}
    41193: 1598:}	
        -: 1599:	
    41193: 1600:void  jobReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float JobPercentage[][11]){
        -: 1601:	//1 - job : type of job (categorical: 'admin.','blue-collar','entrepreneur','housemaid','management','retired','self-employed','services','student','technician','unemployed','?') 
    41193: 1602:	if(strcmp(tempAttribute[1],"admin.") == 0){
    10423: 1603:		tempAttPercentage[0][1] = JobPercentage[0][0];
    10423: 1604:		tempAttPercentage[1][1] = JobPercentage[1][0];
    30770: 1605:	}else if(strcmp(tempAttribute[1],"blue-collar") == 0){
     9256: 1606:		tempAttPercentage[0][1] = JobPercentage[0][1];
     9256: 1607:		tempAttPercentage[1][1] = JobPercentage[1][1];
    21514: 1608:	}else if(strcmp(tempAttribute[1],"entrepreneur") == 0){
     1457: 1609:		tempAttPercentage[0][1] = JobPercentage[0][2];
     1457: 1610:		tempAttPercentage[1][1] = JobPercentage[1][2];
    20057: 1611:	}else if(strcmp(tempAttribute[1],"housemaid") == 0){
     1060: 1612:		tempAttPercentage[0][1] = JobPercentage[0][3];
     1060: 1613:		tempAttPercentage[1][1] = JobPercentage[1][3];
    18997: 1614:	}else if(strcmp(tempAttribute[1],"management") == 0){
     2924: 1615:		tempAttPercentage[0][1] = JobPercentage[0][4];
     2924: 1616:		tempAttPercentage[1][1] = JobPercentage[1][4];
        -: 1617:	}
    16073: 1618:	else if(strcmp(tempAttribute[1],"retired") == 0){
     1720: 1619:		tempAttPercentage[0][1] = JobPercentage[0][5];
     1720: 1620:		tempAttPercentage[1][1] = JobPercentage[1][5];
        -: 1621:	}
    14353: 1622:	else if(strcmp(tempAttribute[1],"self-employed") == 0){
     1421: 1623:		tempAttPercentage[0][1] = JobPercentage[0][6];
     1421: 1624:		tempAttPercentage[1][1] = JobPercentage[1][6];
        -: 1625:	}
    12932: 1626:	else if(strcmp(tempAttribute[1],"services") == 0){
     3970: 1627:		tempAttPercentage[0][1] = JobPercentage[0][7];
     3970: 1628:		tempAttPercentage[1][1] = JobPercentage[1][7];
        -: 1629:	}
     8962: 1630:	else if(strcmp(tempAttribute[1],"student") == 0){
      875: 1631:		tempAttPercentage[0][1] = JobPercentage[0][8];
      875: 1632:		tempAttPercentage[1][1] = JobPercentage[1][8];
        -: 1633:	}
     8087: 1634:	else if(strcmp(tempAttribute[1],"technician") == 0){
     6743: 1635:		tempAttPercentage[0][1] = JobPercentage[0][9];
     6743: 1636:		tempAttPercentage[1][1] = JobPercentage[1][9];
        -: 1637:	}
     1344: 1638:	else if(strcmp(tempAttribute[1],"unemployed") == 0){
     1014: 1639:		tempAttPercentage[0][1] = JobPercentage[0][10];
     1014: 1640:		tempAttPercentage[1][1] = JobPercentage[1][10];
        -: 1641:	}
    41193: 1642:}	
        -: 1643:
    41193: 1644:void  materialReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float MaterialPercentage[][3]){
        -: 1645:	//2 - marital : marital status (categorical: 'divorced','married','single','?'; note: 'divorced' means divorced or widowed) 
        -: 1646:	//int numPerMat[2][3] = {0}, num_Mat0 = 0, num_Mat1 = 0;
    41193: 1647:	if(strcmp(tempAttribute[2],"divorced") == 0){
     4612: 1648:		tempAttPercentage[0][2] = MaterialPercentage[0][0];
     4612: 1649:		tempAttPercentage[1][2] = MaterialPercentage[1][0];
    36581: 1650:	}else if(strcmp(tempAttribute[2],"married") == 0){
    24932: 1651:		tempAttPercentage[0][2] = MaterialPercentage[0][1];
    24932: 1652:		tempAttPercentage[1][2] = MaterialPercentage[1][1];
    11649: 1653:	}else if(strcmp(tempAttribute[2],"single") == 0){
    11569: 1654:		tempAttPercentage[0][2] = MaterialPercentage[0][2];
    11569: 1655:		tempAttPercentage[1][2] = MaterialPercentage[1][2];
        -: 1656:	}
    41193: 1657:}	
        -: 1658:
    41193: 1659:void  EduReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float EducationPercentage[][7]){
        -: 1660:	//3 - education (categorical: 'basic.4y','basic.6y','basic.9y','high.school','illiterate','professional.course','university.degree','?')
    41193: 1661:	if(strcmp(tempAttribute[3],"basic.4y") == 0){
     4176: 1662:		tempAttPercentage[0][3] = EducationPercentage[0][0];
     4176: 1663:		tempAttPercentage[1][3] = EducationPercentage[1][0];
    37017: 1664:	}else if(strcmp(tempAttribute[3],"basic.6y") == 0){
     2294: 1665:		tempAttPercentage[0][3] = EducationPercentage[0][1];
     2294: 1666:		tempAttPercentage[1][3] = EducationPercentage[1][1];
    34723: 1667:	}else if(strcmp(tempAttribute[3],"basic.9y") == 0){
     6045: 1668:		tempAttPercentage[0][3] = EducationPercentage[0][2];
     6045: 1669:		tempAttPercentage[1][3] = EducationPercentage[1][2];
    28678: 1670:	}else if(strcmp(tempAttribute[3],"high.school") == 0){
     9516: 1671:		tempAttPercentage[0][3] = EducationPercentage[0][3];
     9516: 1672:		tempAttPercentage[1][3] = EducationPercentage[1][3];
    19162: 1673:	}else if(strcmp(tempAttribute[3],"illiterate") == 0){
       18: 1674:		tempAttPercentage[0][3] = EducationPercentage[0][4];
       18: 1675:		tempAttPercentage[1][3] = EducationPercentage[1][4];
        -: 1676:	}
    19144: 1677:	else if(strcmp(tempAttribute[3],"professional.course") == 0){
     5243: 1678:		tempAttPercentage[0][3] = EducationPercentage[0][5];
     5243: 1679:		tempAttPercentage[1][3] = EducationPercentage[1][5];
        -: 1680:	}
    13901: 1681:	else if(strcmp(tempAttribute[3],"university.degree") == 0){
    12169: 1682:		tempAttPercentage[0][3] = EducationPercentage[0][6];
    12169: 1683:		tempAttPercentage[1][3] = EducationPercentage[1][6];
        -: 1684:	}
    41193: 1685:}
        -: 1686:
    41193: 1687:void  DefaultReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float DefaultPercentage[][2]){
        -: 1688:	//4 - default: has credit in default? (categorical: 'no','yes','?') 
        -: 1689:	//int numPerDefault[2][2] = {0}, num_Def0 = 0, num_Def1 = 0;
    41193: 1690:	if(strcmp(tempAttribute[4],"no") == 0){
    32590: 1691:		tempAttPercentage[0][4] = DefaultPercentage[0][0];
    32590: 1692:		tempAttPercentage[1][4] = DefaultPercentage[1][0];
     8603: 1693:	}else if(strcmp(tempAttribute[4],"yes") == 0){
        3: 1694:		tempAttPercentage[0][4] = DefaultPercentage[0][1];
        3: 1695:		tempAttPercentage[1][4] = DefaultPercentage[1][1];
        -: 1696:	}
    41193: 1697:}
        -: 1698:
    41193: 1699:void  houseReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float HousePercentage[][2]){
        -: 1700:	//5 - housing: has housing loan? (categorical: 'no','yes','?') 
        -: 1701:	//int numPerHouse[2][2] = {0}, num_House0 = 0, num_House1 = 0;
    41193: 1702:	if(strcmp(tempAttribute[5],"no") == 0){
    18625: 1703:		tempAttPercentage[0][5] = HousePercentage[0][0];
    18625: 1704:		tempAttPercentage[1][5] = HousePercentage[1][0];
    22568: 1705:	}else if(strcmp(tempAttribute[5],"yes") == 0){
    21578: 1706:		tempAttPercentage[0][5] = HousePercentage[0][1];
    21578: 1707:		tempAttPercentage[1][5] = HousePercentage[1][1];
        -: 1708:	}
    41193: 1709:}
        -: 1710:	
    41193: 1711:void  loanReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float LoanPercentage[][2]){	
        -: 1712:	//6 - loan: has personal loan? (categorical: 'no','yes','?') 
        -: 1713:	//int numPerLoan[2][2] = {0}, num_Loan0 = 0, num_Loan1 = 0;
    41193: 1714:	if(strcmp(tempAttribute[6],"no") == 0){
    33954: 1715:		tempAttPercentage[0][6] = LoanPercentage[0][0];
    33954: 1716:		tempAttPercentage[1][6] = LoanPercentage[1][0];
     7239: 1717:	}else if(strcmp(tempAttribute[6],"yes") == 0){
     6249: 1718:		tempAttPercentage[0][6] = LoanPercentage[0][1];
     6249: 1719:		tempAttPercentage[1][6] = LoanPercentage[1][1];
        -: 1720:	}
    41193: 1721:}
        -: 1722:
    41193: 1723:void  contactReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float ContactPercentage[][2]){		
        -: 1724:	//7 - contact: contact communication type (categorical: 'cellular','telephone') 
        -: 1725:	//int numPerCon[2][2] = {0}, num_Con0 = 0, num_Con1 = 0;
    41193: 1726:	if(strcmp(tempAttribute[7],"cellular") == 0){
    26148: 1727:		tempAttPercentage[0][7] = ContactPercentage[0][0];
    26148: 1728:		tempAttPercentage[1][7] = ContactPercentage[1][0];
    15045: 1729:	}else if(strcmp(tempAttribute[7],"telephone") == 0){
    15045: 1730:		tempAttPercentage[0][7] = ContactPercentage[0][1];
    15045: 1731:		tempAttPercentage[1][7] = ContactPercentage[1][1];
        -: 1732:	}
    41193: 1733:}
        -: 1734:
    41195: 1735:void  monthReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float MonthPercentage[][12]){		
        -: 1736:	//8 - month: last contact month of year (categorical: 'jan', 'feb', 'mar', ..., 'nov', 'dec') 
        -: 1737:	//int numPerMonth[2][12] = {0}, num_Month0 = 0, num_Month1 = 0;
    41195: 1738:	if(strcmp(tempAttribute[8],"jan") == 0){
        1: 1739:		tempAttPercentage[0][8] = MonthPercentage[0][0];
        1: 1740:		tempAttPercentage[1][8] = MonthPercentage[1][0];
    41194: 1741:	}else if(strcmp(tempAttribute[8],"feb") == 0){
        1: 1742:		tempAttPercentage[0][8] = MonthPercentage[0][1];
        1: 1743:		tempAttPercentage[1][8] = MonthPercentage[1][1];
    41193: 1744:	}else if(strcmp(tempAttribute[8],"mar") == 0){
      546: 1745:		tempAttPercentage[0][8] = MonthPercentage[0][2];
      546: 1746:		tempAttPercentage[1][8] = MonthPercentage[1][2];
    40647: 1747:	}else if(strcmp(tempAttribute[8],"apr") == 0){
     2632: 1748:		tempAttPercentage[0][8] = MonthPercentage[0][3];
     2632: 1749:		tempAttPercentage[1][8] = MonthPercentage[1][3];
    38015: 1750:	}else if(strcmp(tempAttribute[8],"may") == 0){
    13771: 1751:		tempAttPercentage[0][8] = MonthPercentage[0][4];
    13771: 1752:		tempAttPercentage[1][8] = MonthPercentage[1][4];
    24244: 1753:	}else if(strcmp(tempAttribute[8],"jun") == 0){
     5319: 1754:		tempAttPercentage[0][8] = MonthPercentage[0][5];
     5319: 1755:		tempAttPercentage[1][8] = MonthPercentage[1][5];
    18925: 1756:	}else if(strcmp(tempAttribute[8],"jul") == 0){
     7174: 1757:		tempAttPercentage[0][8] = MonthPercentage[0][6];
     7174: 1758:		tempAttPercentage[1][8] = MonthPercentage[1][6];
    11751: 1759:	}else if(strcmp(tempAttribute[8],"aug") == 0){
     6180: 1760:		tempAttPercentage[0][8] = MonthPercentage[0][7];
     6180: 1761:		tempAttPercentage[1][8] = MonthPercentage[1][7];
     5571: 1762:	}else if(strcmp(tempAttribute[8],"sep") == 0){
      570: 1763:		tempAttPercentage[0][8] = MonthPercentage[0][8];
      570: 1764:		tempAttPercentage[1][8] = MonthPercentage[1][8];
     5001: 1765:	}else if(strcmp(tempAttribute[8],"oct") == 0){
      718: 1766:		tempAttPercentage[0][8] = MonthPercentage[0][9];
      718: 1767:		tempAttPercentage[1][8] = MonthPercentage[1][9];
     4283: 1768:	}else if(strcmp(tempAttribute[8],"nov") == 0){
     4101: 1769:		tempAttPercentage[0][8] = MonthPercentage[0][10];
     4101: 1770:		tempAttPercentage[1][8] = MonthPercentage[1][10];
      182: 1771:	}else if(strcmp(tempAttribute[8],"dec") == 0){
      182: 1772:		tempAttPercentage[0][8] = MonthPercentage[0][11];
      182: 1773:		tempAttPercentage[1][8] = MonthPercentage[1][11];
        -: 1774:	}
    41195: 1775:}	
        -: 1776:
        -: 1777:
    41193: 1778:void  dayReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float DayPercentage[][5]){		
        -: 1779:	//9 - day_of_week: last contact day of the week (categorical: 'mon','tue','wed','thu','fri') 
        -: 1780:	//int numPerDay[2][5] = {0}, num_Day0 = 0, num_Day1 = 0;
    41193: 1781:	if(strcmp(tempAttribute[9],"mon") == 0){
     8515: 1782:		tempAttPercentage[0][9] = DayPercentage[0][0];
     8515: 1783:		tempAttPercentage[1][9] = DayPercentage[1][0];
    32678: 1784:	}else if(strcmp(tempAttribute[9],"tue") == 0){
     8092: 1785:		tempAttPercentage[0][9] = DayPercentage[0][1];
     8092: 1786:		tempAttPercentage[1][9] = DayPercentage[1][1];
    24586: 1787:	}else if(strcmp(tempAttribute[9],"wed") == 0){
     8135: 1788:		tempAttPercentage[0][9] = DayPercentage[0][2];
     8135: 1789:		tempAttPercentage[1][9] = DayPercentage[1][2];
    16451: 1790:	}else if(strcmp(tempAttribute[9],"thu") == 0){
     8623: 1791:		tempAttPercentage[0][9] = DayPercentage[0][3];
     8623: 1792:		tempAttPercentage[1][9] = DayPercentage[1][3];
     7828: 1793:	}else if(strcmp(tempAttribute[9],"fri") == 0){
     7828: 1794:		tempAttPercentage[0][9] = DayPercentage[0][4];
     7828: 1795:		tempAttPercentage[1][9] = DayPercentage[1][4];
        -: 1796:	}
    41193: 1797:}
        -: 1798:
    41193: 1799:void  campaignReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float CampaignPercentage[][3]){		
        -: 1800:	/*10 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact) 
        -: 1801:			- 3 intervals: (0 ~ 3), (4~6), (7+)	*/
        -: 1802:	//int tempCampaign, numPerCampaign[2][3] = {0}, num_Campaign0 = 0, num_Campaign1 = 0;
    41193: 1803:	int tempCampaign = atoi(tempAttribute[10]);
    41193: 1804:	if(tempCampaign <= 3 && tempCampaign >= 0){
    33557: 1805:		tempAttPercentage[0][10] = CampaignPercentage[0][0];
    33557: 1806:		tempAttPercentage[1][10] = CampaignPercentage[1][0];
     7636: 1807:	}else if(tempCampaign >= 4 && tempCampaign <= 6){
     5230: 1808:		tempAttPercentage[0][10] = CampaignPercentage[0][1];
     5230: 1809:		tempAttPercentage[1][10] = CampaignPercentage[1][1];
     2406: 1810:	}else if(tempCampaign >= 7){
     2406: 1811:		tempAttPercentage[0][10] = CampaignPercentage[0][2];
     2406: 1812:		tempAttPercentage[1][10] = CampaignPercentage[1][2];
        -: 1813:	}
    41193: 1814:}
        -: 1815:
    41193: 1816:void  pdaysReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float PDaysPercentage[][4]){	
        -: 1817:	//11 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted) 
        -: 1818:	//			- 4 intervals: (0~11), (12~20), (20 ~ 27), (999) 
        -: 1819:	//int tempPDays, numPerPDays[2][5] = {0}, num_PDays0 = 0, num_PDays1 = 0;
    41193: 1820:	int tempPDays = atoi(tempAttribute[11]);
    41193: 1821:	if(tempPDays <= 11 && tempPDays >= 0){
     1339: 1822:		tempAttPercentage[0][11] = PDaysPercentage[0][0];
     1339: 1823:		tempAttPercentage[1][11] = PDaysPercentage[1][0];
    39854: 1824:	}else if(tempPDays >= 12 && tempPDays <= 20){
      168: 1825:		tempAttPercentage[0][11] = PDaysPercentage[0][1];
      168: 1826:		tempAttPercentage[1][11] = PDaysPercentage[1][1];
    39686: 1827:	}else if(tempPDays >= 20 && tempPDays <= 27){
        8: 1828:		tempAttPercentage[0][11] = PDaysPercentage[0][2];
        8: 1829:		tempAttPercentage[1][11] = PDaysPercentage[1][2];
    39678: 1830:	}else if(tempPDays == 999){
    39678: 1831:		tempAttPercentage[0][11] = PDaysPercentage[0][3];
    39678: 1832:		tempAttPercentage[1][11] = PDaysPercentage[1][3];
        -: 1833:	}
    41193: 1834:}	
        -: 1835:
    41193: 1836:void  previousReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float PreviousPercentage[][2]){	
        -: 1837:	//12 - previous: number of contacts performed before this campaign and for this client (numeric) 
        -: 1838:	//			- intervals: 0, (not 0)
        -: 1839:	//int tempPrevious, numPerPrevious[2][2] = {0}, num_Previous0 = 0, num_Previous1 = 0;
    41193: 1840:	int tempPrevious = atoi(tempAttribute[12]);
    41193: 1841:	if(tempPrevious == 0){
    35567: 1842:		tempAttPercentage[0][12] = PreviousPercentage[0][0];
    35567: 1843:		tempAttPercentage[1][12] = PreviousPercentage[1][0];
     5626: 1844:	}else if(tempPrevious != 0){
     5626: 1845:		tempAttPercentage[0][12] = PreviousPercentage[0][1];
     5626: 1846:		tempAttPercentage[1][12] = PreviousPercentage[1][1];
        -: 1847:	}
    41193: 1848:}	
        -: 1849:
    41193: 1850:void  poutcomeReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float PoutcomePercentage[][3]){		
        -: 1851:	//13 - poutcome: outcome of the previous marketing campaign (categorical: 'failure','nonexistent','success') 
        -: 1852:	//			- intervals: shown as above.
        -: 1853:	//int numPerPoutcome[2][3] = {0}, num_Poutcome0 = 0, num_Poutcome1 = 0;
    41193: 1854:	if(strcmp(tempAttribute[13],"failure") == 0){
     4253: 1855:		tempAttPercentage[0][13] = PoutcomePercentage[0][0];
     4253: 1856:		tempAttPercentage[1][13] = PoutcomePercentage[1][0];
    36940: 1857:	}else if(strcmp(tempAttribute[13],"nonexistent") == 0){
    35567: 1858:		tempAttPercentage[0][13] = PoutcomePercentage[0][1];
    35567: 1859:		tempAttPercentage[1][13] = PoutcomePercentage[1][1];
     1373: 1860:	}else if(strcmp(tempAttribute[13],"success") == 0){
     1373: 1861:		tempAttPercentage[0][13] = PoutcomePercentage[0][2];
     1373: 1862:		tempAttPercentage[1][13] = PoutcomePercentage[1][2];
        -: 1863:	}
    41193: 1864:}	
        -: 1865:
        -: 1866:
    41193: 1867:void empReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float EmpPercentage[][4]){		
        -: 1868:	//14 - emp.var.rate: employment variation rate - quarterly indicator (numeric) 
        -: 1869:	//			- 4 intervals: (x>1.0), (-1.0<= x < 1.0) , (-2.0<= x <-1.0) , (x < -2.0)
        -: 1870:	//float tempEmp; int numPerEmp[2][6] = {0}, num_Emp0 = 0, num_Emp1 = 0;
    41193: 1871:	float tempEmp = atof(tempAttribute[14]);
    41193: 1872:	if(tempEmp >= 1.00){
    24000: 1873:		tempAttPercentage[0][14] = EmpPercentage[0][0];
    24000: 1874:		tempAttPercentage[1][14] = EmpPercentage[1][0];
    17193: 1875:	}else if(tempEmp >= -1.0 && tempEmp < 1.0){
     3693: 1876:		tempAttPercentage[0][14] = EmpPercentage[0][1];
     3693: 1877:		tempAttPercentage[1][14] = EmpPercentage[1][1];
    13500: 1878:	}else if(tempEmp >= -2.0 && tempEmp < -1.0){
    10594: 1879:		tempAttPercentage[0][14] = EmpPercentage[0][2];
    10594: 1880:		tempAttPercentage[1][14] = EmpPercentage[1][2];
     2906: 1881:	}else if(tempEmp < -2.0){
     2906: 1882:		tempAttPercentage[0][14] = EmpPercentage[0][3];
     2906: 1883:		tempAttPercentage[1][14] = EmpPercentage[1][3];
        -: 1884:	}
    41193: 1885:}
        -: 1886:
    41193: 1887:void  priceReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float PricePercentage[][3]){			
        -: 1888:	//15 - cons.price.idx: consumer price index - monthly indicator (numeric)
        -: 1889:	//			- 3 intervals: (x>94.45), (92.8 <= x < 94.45), (x < 92.8)
        -: 1890:	//float tempPrice; int numPerPrice[2][5] = {0}, num_Price0 = 0, num_Price1 = 0;
    41193: 1891:	float tempPrice = atof(tempAttribute[15]);
    41193: 1892:	if(tempPrice >= 94.45){
     4707: 1893:		tempAttPercentage[0][15] = PricePercentage[0][0];
     4707: 1894:		tempAttPercentage[1][15] = PricePercentage[1][0];
    36486: 1895:	}else if(tempPrice >= 92.8 && tempPrice < 94.45){
    34285: 1896:		tempAttPercentage[0][15] = PricePercentage[0][1];
    34285: 1897:		tempAttPercentage[1][15] = PricePercentage[1][1];
     2201: 1898:	}else if(tempPrice < 92.8){
     2201: 1899:		tempAttPercentage[0][15] = PricePercentage[0][2];
     2201: 1900:		tempAttPercentage[1][15] = PricePercentage[1][2];
        -: 1901:	}
    41193: 1902:}
        -: 1903:	
    41193: 1904:void  confReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float ConfPercentage[][4]){				
        -: 1905:	//16 - cons.conf.idx: consumer confidence index - monthly indicator (numeric) 
        -: 1906:	//			- 4 intervals: (x>-30.0), (-35.0<= x < -30.0), (-45.0< = x < -35.0), ( x < -45.0)
        -: 1907:	//float tempConf; int numPerConf[2][6] = {0}, num_Conf0 = 0, num_Conf1 = 0;
    41193: 1908:	float tempConf = atof(tempAttribute[16]);
    41193: 1909:	if(tempConf >= -30.0){
      714: 1910:		tempAttPercentage[0][16] = ConfPercentage[0][0];
      714: 1911:		tempAttPercentage[1][16] = ConfPercentage[1][0];
    40479: 1912:	}else if(tempConf >= -35.0 && tempConf < -30.0){
     1915: 1913:		tempAttPercentage[0][16] = ConfPercentage[0][1];
     1915: 1914:		tempAttPercentage[1][16] = ConfPercentage[1][1];
    38564: 1915:	}else if(tempConf >= -45.0 && tempConf < -35.0){
    29686: 1916:		tempAttPercentage[0][16] = ConfPercentage[0][2];
    29686: 1917:		tempAttPercentage[1][16] = ConfPercentage[1][2];
     8878: 1918:	}else if(tempConf < -45.0){
     8878: 1919:		tempAttPercentage[0][16] = ConfPercentage[0][3];
     8878: 1920:		tempAttPercentage[1][16] = ConfPercentage[1][3];
        -: 1921:	}
    41193: 1922:}
        -: 1923:
    41193: 1924:void  euribor3mReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float Euribor3mPercentage[][4]){				
        -: 1925:	//17 - euribor3m: euribor 3 month rate - daily indicator (numeric) 
        -: 1926:	//			- 4 intervals: (x > 4.86), ( 4.0 <= x < 4.86), ( 1.0 <= x < 4.0), , ( x < 1.0)
        -: 1927:	//float tempEuribor3m; int numPerEuribor3m[2][5] = {0}, num_Euribor3m0 = 0, num_Euribor3m1 = 0;
    41193: 1928:	float tempEuribor3m = atof(tempAttribute[17]);
    41193: 1929:	if(tempEuribor3m >= 4.86){
    17615: 1930:		tempAttPercentage[0][17] = Euribor3mPercentage[0][0];
    17615: 1931:		tempAttPercentage[1][17] = Euribor3mPercentage[1][0];
    23578: 1932:	}else if(tempEuribor3m >= 4.0 && tempEuribor3m < 4.86){
    10064: 1933:		tempAttPercentage[0][17] = Euribor3mPercentage[0][1];
    10064: 1934:		tempAttPercentage[1][17] = Euribor3mPercentage[1][1];
    13514: 1935:	}else if(tempEuribor3m >= 1.0 && tempEuribor3m < 4.0){
     9624: 1936:		tempAttPercentage[0][17] = Euribor3mPercentage[0][2];
     9624: 1937:		tempAttPercentage[1][17] = Euribor3mPercentage[1][2];
     3890: 1938:	}else if(tempEuribor3m < 1.0){
     3890: 1939:		tempAttPercentage[0][17] = Euribor3mPercentage[0][3];
     3890: 1940:		tempAttPercentage[1][17] = Euribor3mPercentage[1][3];
        -: 1941:	}
    41193: 1942:}
    41193: 1943:void  nrReadClass(char tempAttribute[][30], float (&tempAttPercentage)[2][20], float NrPercentage[][2]){	
        -: 1944:	//18 - nr.employed: number of employees - quarterly indicator (numeric) 
        -: 1945:	//			- 2 intervals: (x > 5200.0), (x <= 5200.0)
        -: 1946:	//int tempNr, numPerNr[2][2] = {0}, num_Nr0 = 0, num_Nr1 = 0;
    41193: 1947:	float tempNr = atof(tempAttribute[18]);
    41193: 1948:	if(tempNr > 5200.0){
    16237: 1949:		tempAttPercentage[0][18] = NrPercentage[0][0];
    16237: 1950:		tempAttPercentage[1][18] = NrPercentage[1][0];
    24956: 1951:	}else if(tempNr <= 5200.0){
    24956: 1952:		tempAttPercentage[0][18] = NrPercentage[0][1];
    24956: 1953:		tempAttPercentage[1][18] = NrPercentage[1][1];
        -: 1954:	}
    41193: 1955:}
        -: 1956:
    41193: 1957:void finalPercentageCalculation(float tempAttPercentage[][20], double &NoOutput_Percentage, double &YesOutput_Percentage){
        -: 1958:	int col;
   782667: 1959:	for(col = 0; col < 18; col ++){
   741474: 1960:		if(tempAttPercentage[0][col] != 0){
        -: 1961:			//cout<<"NO percentage: "<<tempAttPercentage[0][col]<<endl;
   741471: 1962:			NoOutput_Percentage += log(tempAttPercentage[0][col]);
        -: 1963:		}
   741474: 1964:		if(tempAttPercentage[1][col] != 0){
        -: 1965:			//cout<<"Yes percentage: "<<tempAttPercentage[1][col]<<endl;
   741470: 1966:			YesOutput_Percentage += log(tempAttPercentage[1][col]);
        -: 1967:		}
        -: 1968:	}
    41196: 1969:}
        -: 1970:
        -: 1971://---------------------------------------------------------------
        -: 1972://End of reading test data from the database
        -: 1973://---------------------------------------------------------------
